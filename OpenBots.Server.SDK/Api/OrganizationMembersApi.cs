/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Server.SDK.Client;
using OpenBots.Server.SDK.Model;

namespace OpenBots.Server.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IOrganizationMembersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets all the members of the given organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>OrganizationMember</returns>
        OrganizationMember ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersGet (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Gets all the members of the given organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of OrganizationMember</returns>
        ApiResponse<OrganizationMember> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersGetWithHttpInfo (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Invite user to become an organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersInviteUserPost (string organizationId, string apiVersion, InviteUserViewModel body = null);

        /// <summary>
        /// Invite user to become an organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersInviteUserPostWithHttpInfo (string organizationId, string apiVersion, InviteUserViewModel body = null);
        /// <summary>
        /// Delete organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdDelete (string organizationId, string organizationMemberId, string apiVersion);

        /// <summary>
        /// Delete organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdDeleteWithHttpInfo (string organizationId, string organizationMemberId, string apiVersion);
        /// <summary>
        /// Updates the partial details of organization members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPatch (string organizationMemberId, string apiVersion, string organizationId, List<Operation> body = null);

        /// <summary>
        /// Updates the partial details of organization members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPatchWithHttpInfo (string organizationMemberId, string apiVersion, string organizationId, List<Operation> body = null);
        /// <summary>
        /// Update the organization member details
        /// </summary>
        /// <remarks>
        /// Updates the organization member details with the particular id for the given organization
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="organizationMemberId">Organization member id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">New value of the organization member to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPut (string organizationId, string organizationMemberId, string apiVersion, OrganizationMember body = null);

        /// <summary>
        /// Update the organization member details
        /// </summary>
        /// <remarks>
        /// Updates the organization member details with the particular id for the given organization
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="organizationMemberId">Organization member id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">New value of the organization member to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPutWithHttpInfo (string organizationId, string organizationMemberId, string apiVersion, OrganizationMember body = null);
        /// <summary>
        /// Gets the people in the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>TeamMemberViewModelPaginatedList</returns>
        TeamMemberViewModelPaginatedList ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPeopleGet (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Gets the people in the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of TeamMemberViewModelPaginatedList</returns>
        ApiResponse<TeamMemberViewModelPaginatedList> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPeopleGetWithHttpInfo (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieves a user&#x27;s details for a particular organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <returns>AspNetUsers</returns>
        AspNetUsers ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdGet (string personId, string apiVersion, string organizationId);

        /// <summary>
        /// Retrieves a user&#x27;s details for a particular organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <returns>ApiResponse of AspNetUsers</returns>
        ApiResponse<AspNetUsers> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdGetWithHttpInfo (string personId, string apiVersion, string organizationId);
        /// <summary>
        /// Updates the partial details of an organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Organization member person id</param>
        /// <param name="organizationId">Organization id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Values to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdUpdateUserPatch (string personId, string organizationId, string apiVersion, UpdateTeamMemberViewModel body = null);

        /// <summary>
        /// Updates the partial details of an organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Organization member person id</param>
        /// <param name="organizationId">Organization id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Values to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdUpdateUserPatchWithHttpInfo (string personId, string organizationId, string apiVersion, UpdateTeamMemberViewModel body = null);
        /// <summary>
        /// Adds a new member to the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Organization member details (optional)</param>
        /// <returns>OrganizationMember</returns>
        OrganizationMember ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPost (string organizationId, string apiVersion, OrganizationMember body = null);

        /// <summary>
        /// Adds a new member to the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Organization member details (optional)</param>
        /// <returns>ApiResponse of OrganizationMember</returns>
        ApiResponse<OrganizationMember> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPostWithHttpInfo (string organizationId, string apiVersion, OrganizationMember body = null);
        /// <summary>
        /// Get the member for a particular organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <returns>OrganizationMember</returns>
        OrganizationMember GetOrganizationMember (string organizationMemberId, string apiVersion, string organizationId);

        /// <summary>
        /// Get the member for a particular organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <returns>ApiResponse of OrganizationMember</returns>
        ApiResponse<OrganizationMember> GetOrganizationMemberWithHttpInfo (string organizationMemberId, string apiVersion, string organizationId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets all the members of the given organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of OrganizationMember</returns>
        System.Threading.Tasks.Task<OrganizationMember> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersGetAsync (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Gets all the members of the given organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (OrganizationMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationMember>> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersGetAsyncWithHttpInfo (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Invite user to become an organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersInviteUserPostAsync (string organizationId, string apiVersion, InviteUserViewModel body = null);

        /// <summary>
        /// Invite user to become an organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersInviteUserPostAsyncWithHttpInfo (string organizationId, string apiVersion, InviteUserViewModel body = null);
        /// <summary>
        /// Delete organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdDeleteAsync (string organizationId, string organizationMemberId, string apiVersion);

        /// <summary>
        /// Delete organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdDeleteAsyncWithHttpInfo (string organizationId, string organizationMemberId, string apiVersion);
        /// <summary>
        /// Updates the partial details of organization members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPatchAsync (string organizationMemberId, string apiVersion, string organizationId, List<Operation> body = null);

        /// <summary>
        /// Updates the partial details of organization members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPatchAsyncWithHttpInfo (string organizationMemberId, string apiVersion, string organizationId, List<Operation> body = null);
        /// <summary>
        /// Update the organization member details
        /// </summary>
        /// <remarks>
        /// Updates the organization member details with the particular id for the given organization
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="organizationMemberId">Organization member id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">New value of the organization member to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPutAsync (string organizationId, string organizationMemberId, string apiVersion, OrganizationMember body = null);

        /// <summary>
        /// Update the organization member details
        /// </summary>
        /// <remarks>
        /// Updates the organization member details with the particular id for the given organization
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="organizationMemberId">Organization member id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">New value of the organization member to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPutAsyncWithHttpInfo (string organizationId, string organizationMemberId, string apiVersion, OrganizationMember body = null);
        /// <summary>
        /// Gets the people in the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of TeamMemberViewModelPaginatedList</returns>
        System.Threading.Tasks.Task<TeamMemberViewModelPaginatedList> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPeopleGetAsync (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Gets the people in the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (TeamMemberViewModelPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMemberViewModelPaginatedList>> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPeopleGetAsyncWithHttpInfo (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Retrieves a user&#x27;s details for a particular organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <returns>Task of AspNetUsers</returns>
        System.Threading.Tasks.Task<AspNetUsers> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdGetAsync (string personId, string apiVersion, string organizationId);

        /// <summary>
        /// Retrieves a user&#x27;s details for a particular organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <returns>Task of ApiResponse (AspNetUsers)</returns>
        System.Threading.Tasks.Task<ApiResponse<AspNetUsers>> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdGetAsyncWithHttpInfo (string personId, string apiVersion, string organizationId);
        /// <summary>
        /// Updates the partial details of an organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Organization member person id</param>
        /// <param name="organizationId">Organization id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Values to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdUpdateUserPatchAsync (string personId, string organizationId, string apiVersion, UpdateTeamMemberViewModel body = null);

        /// <summary>
        /// Updates the partial details of an organization member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Organization member person id</param>
        /// <param name="organizationId">Organization id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Values to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdUpdateUserPatchAsyncWithHttpInfo (string personId, string organizationId, string apiVersion, UpdateTeamMemberViewModel body = null);
        /// <summary>
        /// Adds a new member to the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Organization member details (optional)</param>
        /// <returns>Task of OrganizationMember</returns>
        System.Threading.Tasks.Task<OrganizationMember> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPostAsync (string organizationId, string apiVersion, OrganizationMember body = null);

        /// <summary>
        /// Adds a new member to the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Organization member details (optional)</param>
        /// <returns>Task of ApiResponse (OrganizationMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationMember>> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPostAsyncWithHttpInfo (string organizationId, string apiVersion, OrganizationMember body = null);
        /// <summary>
        /// Get the member for a particular organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <returns>Task of OrganizationMember</returns>
        System.Threading.Tasks.Task<OrganizationMember> GetOrganizationMemberAsync (string organizationMemberId, string apiVersion, string organizationId);

        /// <summary>
        /// Get the member for a particular organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <returns>Task of ApiResponse (OrganizationMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationMember>> GetOrganizationMemberAsyncWithHttpInfo (string organizationMemberId, string apiVersion, string organizationId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class OrganizationMembersApi : IOrganizationMembersApi
    {
        private OpenBots.Server.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationMembersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationMembersApi(String basePath)
        {
            this.Configuration = new OpenBots.Server.SDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationMembersApi"/> class
        /// </summary>
        /// <returns></returns>
        public OrganizationMembersApi()
        {
            this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationMembersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganizationMembersApi(OpenBots.Server.SDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Server.SDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Server.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets all the members of the given organization 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>OrganizationMember</returns>
        public OrganizationMember ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersGet (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<OrganizationMember> localVarResponse = ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersGetWithHttpInfo(organizationId, apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all the members of the given organization 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of OrganizationMember</returns>
        public ApiResponse< OrganizationMember > ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersGetWithHttpInfo (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersGet");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMember)));
        }

        /// <summary>
        /// Gets all the members of the given organization 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of OrganizationMember</returns>
        public async System.Threading.Tasks.Task<OrganizationMember> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersGetAsync (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<OrganizationMember> localVarResponse = await ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersGetAsyncWithHttpInfo(organizationId, apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all the members of the given organization 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (OrganizationMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationMember>> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersGetAsyncWithHttpInfo (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersGet");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMember)));
        }

        /// <summary>
        /// Invite user to become an organization member 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersInviteUserPost (string organizationId, string apiVersion, InviteUserViewModel body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersInviteUserPostWithHttpInfo(organizationId, apiVersion, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Invite user to become an organization member 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersInviteUserPostWithHttpInfo (string organizationId, string apiVersion, InviteUserViewModel body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersInviteUserPost");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersInviteUserPost");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers/InviteUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersInviteUserPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Invite user to become an organization member 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersInviteUserPostAsync (string organizationId, string apiVersion, InviteUserViewModel body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersInviteUserPostAsyncWithHttpInfo(organizationId, apiVersion, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Invite user to become an organization member 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersInviteUserPostAsyncWithHttpInfo (string organizationId, string apiVersion, InviteUserViewModel body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersInviteUserPost");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersInviteUserPost");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers/InviteUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersInviteUserPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Delete organization member 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdDelete (string organizationId, string organizationMemberId, string apiVersion)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdDeleteWithHttpInfo(organizationId, organizationMemberId, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete organization member 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdDeleteWithHttpInfo (string organizationId, string organizationMemberId, string apiVersion)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdDelete");
            // verify the required parameter 'organizationMemberId' is set
            if (organizationMemberId == null)
                throw new ApiException(400, "Missing required parameter 'organizationMemberId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdDelete");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdDelete");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers/{organizationMemberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (organizationMemberId != null) localVarPathParams.Add("organizationMemberId", this.Configuration.ApiClient.ParameterToString(organizationMemberId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Delete organization member 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdDeleteAsync (string organizationId, string organizationMemberId, string apiVersion)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdDeleteAsyncWithHttpInfo(organizationId, organizationMemberId, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete organization member 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdDeleteAsyncWithHttpInfo (string organizationId, string organizationMemberId, string apiVersion)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdDelete");
            // verify the required parameter 'organizationMemberId' is set
            if (organizationMemberId == null)
                throw new ApiException(400, "Missing required parameter 'organizationMemberId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdDelete");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdDelete");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers/{organizationMemberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (organizationMemberId != null) localVarPathParams.Add("organizationMemberId", this.Configuration.ApiClient.ParameterToString(organizationMemberId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates the partial details of organization members 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPatch (string organizationMemberId, string apiVersion, string organizationId, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPatchWithHttpInfo(organizationMemberId, apiVersion, organizationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the partial details of organization members 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPatchWithHttpInfo (string organizationMemberId, string apiVersion, string organizationId, List<Operation> body = null)
        {
            // verify the required parameter 'organizationMemberId' is set
            if (organizationMemberId == null)
                throw new ApiException(400, "Missing required parameter 'organizationMemberId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPatch");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPatch");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPatch");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers/{organizationMemberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationMemberId != null) localVarPathParams.Add("organizationMemberId", this.Configuration.ApiClient.ParameterToString(organizationMemberId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates the partial details of organization members 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPatchAsync (string organizationMemberId, string apiVersion, string organizationId, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPatchAsyncWithHttpInfo(organizationMemberId, apiVersion, organizationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the partial details of organization members 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPatchAsyncWithHttpInfo (string organizationMemberId, string apiVersion, string organizationId, List<Operation> body = null)
        {
            // verify the required parameter 'organizationMemberId' is set
            if (organizationMemberId == null)
                throw new ApiException(400, "Missing required parameter 'organizationMemberId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPatch");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPatch");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPatch");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers/{organizationMemberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationMemberId != null) localVarPathParams.Add("organizationMemberId", this.Configuration.ApiClient.ParameterToString(organizationMemberId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Update the organization member details Updates the organization member details with the particular id for the given organization
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="organizationMemberId">Organization member id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">New value of the organization member to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPut (string organizationId, string organizationMemberId, string apiVersion, OrganizationMember body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPutWithHttpInfo(organizationId, organizationMemberId, apiVersion, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the organization member details Updates the organization member details with the particular id for the given organization
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="organizationMemberId">Organization member id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">New value of the organization member to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPutWithHttpInfo (string organizationId, string organizationMemberId, string apiVersion, OrganizationMember body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPut");
            // verify the required parameter 'organizationMemberId' is set
            if (organizationMemberId == null)
                throw new ApiException(400, "Missing required parameter 'organizationMemberId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPut");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers/{organizationMemberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (organizationMemberId != null) localVarPathParams.Add("organizationMemberId", this.Configuration.ApiClient.ParameterToString(organizationMemberId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Update the organization member details Updates the organization member details with the particular id for the given organization
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="organizationMemberId">Organization member id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">New value of the organization member to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPutAsync (string organizationId, string organizationMemberId, string apiVersion, OrganizationMember body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPutAsyncWithHttpInfo(organizationId, organizationMemberId, apiVersion, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the organization member details Updates the organization member details with the particular id for the given organization
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="organizationMemberId">Organization member id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">New value of the organization member to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPutAsyncWithHttpInfo (string organizationId, string organizationMemberId, string apiVersion, OrganizationMember body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPut");
            // verify the required parameter 'organizationMemberId' is set
            if (organizationMemberId == null)
                throw new ApiException(400, "Missing required parameter 'organizationMemberId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPut");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers/{organizationMemberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (organizationMemberId != null) localVarPathParams.Add("organizationMemberId", this.Configuration.ApiClient.ParameterToString(organizationMemberId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersOrganizationMemberIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Gets the people in the organization 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>TeamMemberViewModelPaginatedList</returns>
        public TeamMemberViewModelPaginatedList ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPeopleGet (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<TeamMemberViewModelPaginatedList> localVarResponse = ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPeopleGetWithHttpInfo(organizationId, apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the people in the organization 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of TeamMemberViewModelPaginatedList</returns>
        public ApiResponse< TeamMemberViewModelPaginatedList > ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPeopleGetWithHttpInfo (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPeopleGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPeopleGet");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers/People";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPeopleGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TeamMemberViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberViewModelPaginatedList)));
        }

        /// <summary>
        /// Gets the people in the organization 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of TeamMemberViewModelPaginatedList</returns>
        public async System.Threading.Tasks.Task<TeamMemberViewModelPaginatedList> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPeopleGetAsync (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<TeamMemberViewModelPaginatedList> localVarResponse = await ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPeopleGetAsyncWithHttpInfo(organizationId, apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the people in the organization 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (TeamMemberViewModelPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMemberViewModelPaginatedList>> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPeopleGetAsyncWithHttpInfo (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPeopleGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPeopleGet");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers/People";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPeopleGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TeamMemberViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberViewModelPaginatedList)));
        }

        /// <summary>
        /// Retrieves a user&#x27;s details for a particular organization member 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <returns>AspNetUsers</returns>
        public AspNetUsers ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdGet (string personId, string apiVersion, string organizationId)
        {
             ApiResponse<AspNetUsers> localVarResponse = ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdGetWithHttpInfo(personId, apiVersion, organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a user&#x27;s details for a particular organization member 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <returns>ApiResponse of AspNetUsers</returns>
        public ApiResponse< AspNetUsers > ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdGetWithHttpInfo (string personId, string apiVersion, string organizationId)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdGet");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdGet");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers/Person/{personId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AspNetUsers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AspNetUsers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AspNetUsers)));
        }

        /// <summary>
        /// Retrieves a user&#x27;s details for a particular organization member 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <returns>Task of AspNetUsers</returns>
        public async System.Threading.Tasks.Task<AspNetUsers> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdGetAsync (string personId, string apiVersion, string organizationId)
        {
             ApiResponse<AspNetUsers> localVarResponse = await ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdGetAsyncWithHttpInfo(personId, apiVersion, organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a user&#x27;s details for a particular organization member 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <returns>Task of ApiResponse (AspNetUsers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AspNetUsers>> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdGetAsyncWithHttpInfo (string personId, string apiVersion, string organizationId)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdGet");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdGet");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers/Person/{personId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AspNetUsers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AspNetUsers) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AspNetUsers)));
        }

        /// <summary>
        /// Updates the partial details of an organization member 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Organization member person id</param>
        /// <param name="organizationId">Organization id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Values to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdUpdateUserPatch (string personId, string organizationId, string apiVersion, UpdateTeamMemberViewModel body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdUpdateUserPatchWithHttpInfo(personId, organizationId, apiVersion, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the partial details of an organization member 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Organization member person id</param>
        /// <param name="organizationId">Organization id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Values to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdUpdateUserPatchWithHttpInfo (string personId, string organizationId, string apiVersion, UpdateTeamMemberViewModel body = null)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdUpdateUserPatch");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdUpdateUserPatch");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdUpdateUserPatch");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers/Person/{personId}/UpdateUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdUpdateUserPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates the partial details of an organization member 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Organization member person id</param>
        /// <param name="organizationId">Organization id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Values to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdUpdateUserPatchAsync (string personId, string organizationId, string apiVersion, UpdateTeamMemberViewModel body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdUpdateUserPatchAsyncWithHttpInfo(personId, organizationId, apiVersion, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the partial details of an organization member 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Organization member person id</param>
        /// <param name="organizationId">Organization id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Values to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdUpdateUserPatchAsyncWithHttpInfo (string personId, string organizationId, string apiVersion, UpdateTeamMemberViewModel body = null)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdUpdateUserPatch");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdUpdateUserPatch");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdUpdateUserPatch");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers/Person/{personId}/UpdateUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPersonPersonIdUpdateUserPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Adds a new member to the organization 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Organization member details (optional)</param>
        /// <returns>OrganizationMember</returns>
        public OrganizationMember ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPost (string organizationId, string apiVersion, OrganizationMember body = null)
        {
             ApiResponse<OrganizationMember> localVarResponse = ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPostWithHttpInfo(organizationId, apiVersion, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new member to the organization 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Organization member details (optional)</param>
        /// <returns>ApiResponse of OrganizationMember</returns>
        public ApiResponse< OrganizationMember > ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPostWithHttpInfo (string organizationId, string apiVersion, OrganizationMember body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPost");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPost");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMember)));
        }

        /// <summary>
        /// Adds a new member to the organization 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Organization member details (optional)</param>
        /// <returns>Task of OrganizationMember</returns>
        public async System.Threading.Tasks.Task<OrganizationMember> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPostAsync (string organizationId, string apiVersion, OrganizationMember body = null)
        {
             ApiResponse<OrganizationMember> localVarResponse = await ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPostAsyncWithHttpInfo(organizationId, apiVersion, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new member to the organization 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Organization member details (optional)</param>
        /// <returns>Task of ApiResponse (OrganizationMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationMember>> ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPostAsyncWithHttpInfo (string organizationId, string apiVersion, OrganizationMember body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPost");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPost");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdOrganizationMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMember)));
        }

        /// <summary>
        /// Get the member for a particular organization 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <returns>OrganizationMember</returns>
        public OrganizationMember GetOrganizationMember (string organizationMemberId, string apiVersion, string organizationId)
        {
             ApiResponse<OrganizationMember> localVarResponse = GetOrganizationMemberWithHttpInfo(organizationMemberId, apiVersion, organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the member for a particular organization 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <returns>ApiResponse of OrganizationMember</returns>
        public ApiResponse< OrganizationMember > GetOrganizationMemberWithHttpInfo (string organizationMemberId, string apiVersion, string organizationId)
        {
            // verify the required parameter 'organizationMemberId' is set
            if (organizationMemberId == null)
                throw new ApiException(400, "Missing required parameter 'organizationMemberId' when calling OrganizationMembersApi->GetOrganizationMember");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->GetOrganizationMember");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->GetOrganizationMember");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers/{organizationMemberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationMemberId != null) localVarPathParams.Add("organizationMemberId", this.Configuration.ApiClient.ParameterToString(organizationMemberId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMember)));
        }

        /// <summary>
        /// Get the member for a particular organization 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <returns>Task of OrganizationMember</returns>
        public async System.Threading.Tasks.Task<OrganizationMember> GetOrganizationMemberAsync (string organizationMemberId, string apiVersion, string organizationId)
        {
             ApiResponse<OrganizationMember> localVarResponse = await GetOrganizationMemberAsyncWithHttpInfo(organizationMemberId, apiVersion, organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the member for a particular organization 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">Organization member identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="organizationId"></param>
        /// <returns>Task of ApiResponse (OrganizationMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationMember>> GetOrganizationMemberAsyncWithHttpInfo (string organizationMemberId, string apiVersion, string organizationId)
        {
            // verify the required parameter 'organizationMemberId' is set
            if (organizationMemberId == null)
                throw new ApiException(400, "Missing required parameter 'organizationMemberId' when calling OrganizationMembersApi->GetOrganizationMember");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling OrganizationMembersApi->GetOrganizationMember");
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationMembersApi->GetOrganizationMember");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/OrganizationMembers/{organizationMemberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationMemberId != null) localVarPathParams.Add("organizationMemberId", this.Configuration.ApiClient.ParameterToString(organizationMemberId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMember)));
        }

    }
}
