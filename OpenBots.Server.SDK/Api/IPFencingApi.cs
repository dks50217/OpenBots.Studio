/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Server.SDK.Client;
using OpenBots.Server.SDK.Model;

namespace OpenBots.Server.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IIPFencingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Provides a list of all IPFencings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>IPFencingPaginatedList</returns>
        IPFencingPaginatedList ApiVapiVersionOrganizationsOrganizationIdIPFencingGet (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all IPFencings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of IPFencingPaginatedList</returns>
        ApiResponse<IPFencingPaginatedList> ApiVapiVersionOrganizationsOrganizationIdIPFencingGetWithHttpInfo (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Deletes an IPFencing rule with a specified id from the organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionOrganizationsOrganizationIdIPFencingIdDelete (string organizationId, string id, string apiVersion);

        /// <summary>
        /// Deletes an IPFencing rule with a specified id from the organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionOrganizationsOrganizationIdIPFencingIdDeleteWithHttpInfo (string organizationId, string id, string apiVersion);
        /// <summary>
        /// Updates partial details of an IPFencing entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Details of IPFencing patch (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPatch (string organizationId, string id, string apiVersion, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of an IPFencing entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Details of IPFencing patch (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPatchWithHttpInfo (string organizationId, string id, string apiVersion, List<Operation> body = null);
        /// <summary>
        /// Update the IPFencing rule
        /// </summary>
        /// <remarks>
        /// Updates the IPFencing with the particular id for the given organization
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">IPFencing id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">New value of the IPFencing to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPut (string organizationId, string id, string apiVersion, IPFencing body = null);

        /// <summary>
        /// Update the IPFencing rule
        /// </summary>
        /// <remarks>
        /// Updates the IPFencing with the particular id for the given organization
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">IPFencing id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">New value of the IPFencing to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPutWithHttpInfo (string organizationId, string id, string apiVersion, IPFencing body = null);
        /// <summary>
        /// Updates the IPFencing Mode to AllowMode
        /// </summary>
        /// <remarks>
        /// Updates the IPFencingMode of the specified organizationID to AllowMode
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionOrganizationsOrganizationIdIPFencingModeAllowAllPut (string organizationId, string apiVersion);

        /// <summary>
        /// Updates the IPFencing Mode to AllowMode
        /// </summary>
        /// <remarks>
        /// Updates the IPFencingMode of the specified organizationID to AllowMode
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionOrganizationsOrganizationIdIPFencingModeAllowAllPutWithHttpInfo (string organizationId, string apiVersion);
        /// <summary>
        /// Updates the IPFencing Mode to DenyAll
        /// </summary>
        /// <remarks>
        /// Updates the IPFencingMode of the specified organizationID to DenyMode
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionOrganizationsOrganizationIdIPFencingModeDenyAllPut (string organizationId, string apiVersion);

        /// <summary>
        /// Updates the IPFencing Mode to DenyAll
        /// </summary>
        /// <remarks>
        /// Updates the IPFencingMode of the specified organizationID to DenyMode
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionOrganizationsOrganizationIdIPFencingModeDenyAllPutWithHttpInfo (string organizationId, string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="apiVersion"></param>
        /// <returns>IPFencingPaginatedList</returns>
        IPFencingPaginatedList ApiVapiVersionOrganizationsOrganizationIdIPFencingModeGet (string organizationId, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of IPFencingPaginatedList</returns>
        ApiResponse<IPFencingPaginatedList> ApiVapiVersionOrganizationsOrganizationIdIPFencingModeGetWithHttpInfo (string organizationId, string apiVersion);
        /// <summary>
        /// Adds a new IPFencing rule with the specified organization ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Json containing IPFencing model (optional)</param>
        /// <returns>CreateIPFencingViewModel</returns>
        CreateIPFencingViewModel ApiVapiVersionOrganizationsOrganizationIdIPFencingPost (string organizationId, string apiVersion, CreateIPFencingViewModel body = null);

        /// <summary>
        /// Adds a new IPFencing rule with the specified organization ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Json containing IPFencing model (optional)</param>
        /// <returns>ApiResponse of CreateIPFencingViewModel</returns>
        ApiResponse<CreateIPFencingViewModel> ApiVapiVersionOrganizationsOrganizationIdIPFencingPostWithHttpInfo (string organizationId, string apiVersion, CreateIPFencingViewModel body = null);
        /// <summary>
        /// Provides an IPFencing&#x27;s details for a particular IPFencing ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing id</param>
        /// <param name="apiVersion"></param>
        /// <returns>IPFencing</returns>
        IPFencing GetIPFencing (string organizationId, string id, string apiVersion);

        /// <summary>
        /// Provides an IPFencing&#x27;s details for a particular IPFencing ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing id</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of IPFencing</returns>
        ApiResponse<IPFencing> GetIPFencingWithHttpInfo (string organizationId, string id, string apiVersion);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Provides a list of all IPFencings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of IPFencingPaginatedList</returns>
        System.Threading.Tasks.Task<IPFencingPaginatedList> ApiVapiVersionOrganizationsOrganizationIdIPFencingGetAsync (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all IPFencings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (IPFencingPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<IPFencingPaginatedList>> ApiVapiVersionOrganizationsOrganizationIdIPFencingGetAsyncWithHttpInfo (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Deletes an IPFencing rule with a specified id from the organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdIPFencingIdDeleteAsync (string organizationId, string id, string apiVersion);

        /// <summary>
        /// Deletes an IPFencing rule with a specified id from the organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdIPFencingIdDeleteAsyncWithHttpInfo (string organizationId, string id, string apiVersion);
        /// <summary>
        /// Updates partial details of an IPFencing entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Details of IPFencing patch (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPatchAsync (string organizationId, string id, string apiVersion, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of an IPFencing entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Details of IPFencing patch (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPatchAsyncWithHttpInfo (string organizationId, string id, string apiVersion, List<Operation> body = null);
        /// <summary>
        /// Update the IPFencing rule
        /// </summary>
        /// <remarks>
        /// Updates the IPFencing with the particular id for the given organization
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">IPFencing id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">New value of the IPFencing to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPutAsync (string organizationId, string id, string apiVersion, IPFencing body = null);

        /// <summary>
        /// Update the IPFencing rule
        /// </summary>
        /// <remarks>
        /// Updates the IPFencing with the particular id for the given organization
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">IPFencing id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">New value of the IPFencing to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPutAsyncWithHttpInfo (string organizationId, string id, string apiVersion, IPFencing body = null);
        /// <summary>
        /// Updates the IPFencing Mode to AllowMode
        /// </summary>
        /// <remarks>
        /// Updates the IPFencingMode of the specified organizationID to AllowMode
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdIPFencingModeAllowAllPutAsync (string organizationId, string apiVersion);

        /// <summary>
        /// Updates the IPFencing Mode to AllowMode
        /// </summary>
        /// <remarks>
        /// Updates the IPFencingMode of the specified organizationID to AllowMode
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdIPFencingModeAllowAllPutAsyncWithHttpInfo (string organizationId, string apiVersion);
        /// <summary>
        /// Updates the IPFencing Mode to DenyAll
        /// </summary>
        /// <remarks>
        /// Updates the IPFencingMode of the specified organizationID to DenyMode
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdIPFencingModeDenyAllPutAsync (string organizationId, string apiVersion);

        /// <summary>
        /// Updates the IPFencing Mode to DenyAll
        /// </summary>
        /// <remarks>
        /// Updates the IPFencingMode of the specified organizationID to DenyMode
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdIPFencingModeDenyAllPutAsyncWithHttpInfo (string organizationId, string apiVersion);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of IPFencingPaginatedList</returns>
        System.Threading.Tasks.Task<IPFencingPaginatedList> ApiVapiVersionOrganizationsOrganizationIdIPFencingModeGetAsync (string organizationId, string apiVersion);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (IPFencingPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<IPFencingPaginatedList>> ApiVapiVersionOrganizationsOrganizationIdIPFencingModeGetAsyncWithHttpInfo (string organizationId, string apiVersion);
        /// <summary>
        /// Adds a new IPFencing rule with the specified organization ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Json containing IPFencing model (optional)</param>
        /// <returns>Task of CreateIPFencingViewModel</returns>
        System.Threading.Tasks.Task<CreateIPFencingViewModel> ApiVapiVersionOrganizationsOrganizationIdIPFencingPostAsync (string organizationId, string apiVersion, CreateIPFencingViewModel body = null);

        /// <summary>
        /// Adds a new IPFencing rule with the specified organization ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Json containing IPFencing model (optional)</param>
        /// <returns>Task of ApiResponse (CreateIPFencingViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateIPFencingViewModel>> ApiVapiVersionOrganizationsOrganizationIdIPFencingPostAsyncWithHttpInfo (string organizationId, string apiVersion, CreateIPFencingViewModel body = null);
        /// <summary>
        /// Provides an IPFencing&#x27;s details for a particular IPFencing ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of IPFencing</returns>
        System.Threading.Tasks.Task<IPFencing> GetIPFencingAsync (string organizationId, string id, string apiVersion);

        /// <summary>
        /// Provides an IPFencing&#x27;s details for a particular IPFencing ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (IPFencing)</returns>
        System.Threading.Tasks.Task<ApiResponse<IPFencing>> GetIPFencingAsyncWithHttpInfo (string organizationId, string id, string apiVersion);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class IPFencingApi : IIPFencingApi
    {
        private OpenBots.Server.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IPFencingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IPFencingApi(String basePath)
        {
            this.Configuration = new OpenBots.Server.SDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IPFencingApi"/> class
        /// </summary>
        /// <returns></returns>
        public IPFencingApi()
        {
            this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IPFencingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IPFencingApi(OpenBots.Server.SDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Server.SDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Server.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Provides a list of all IPFencings 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>IPFencingPaginatedList</returns>
        public IPFencingPaginatedList ApiVapiVersionOrganizationsOrganizationIdIPFencingGet (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<IPFencingPaginatedList> localVarResponse = ApiVapiVersionOrganizationsOrganizationIdIPFencingGetWithHttpInfo(organizationId, apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a list of all IPFencings 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of IPFencingPaginatedList</returns>
        public ApiResponse< IPFencingPaginatedList > ApiVapiVersionOrganizationsOrganizationIdIPFencingGetWithHttpInfo (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingGet");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/IPFencing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdIPFencingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IPFencingPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IPFencingPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IPFencingPaginatedList)));
        }

        /// <summary>
        /// Provides a list of all IPFencings 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of IPFencingPaginatedList</returns>
        public async System.Threading.Tasks.Task<IPFencingPaginatedList> ApiVapiVersionOrganizationsOrganizationIdIPFencingGetAsync (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<IPFencingPaginatedList> localVarResponse = await ApiVapiVersionOrganizationsOrganizationIdIPFencingGetAsyncWithHttpInfo(organizationId, apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a list of all IPFencings 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (IPFencingPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IPFencingPaginatedList>> ApiVapiVersionOrganizationsOrganizationIdIPFencingGetAsyncWithHttpInfo (string organizationId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingGet");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/IPFencing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdIPFencingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IPFencingPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IPFencingPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IPFencingPaginatedList)));
        }

        /// <summary>
        /// Deletes an IPFencing rule with a specified id from the organization. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionOrganizationsOrganizationIdIPFencingIdDelete (string organizationId, string id, string apiVersion)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionOrganizationsOrganizationIdIPFencingIdDeleteWithHttpInfo(organizationId, id, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an IPFencing rule with a specified id from the organization. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionOrganizationsOrganizationIdIPFencingIdDeleteWithHttpInfo (string organizationId, string id, string apiVersion)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingIdDelete");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingIdDelete");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/IPFencing/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdIPFencingIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Deletes an IPFencing rule with a specified id from the organization. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdIPFencingIdDeleteAsync (string organizationId, string id, string apiVersion)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionOrganizationsOrganizationIdIPFencingIdDeleteAsyncWithHttpInfo(organizationId, id, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an IPFencing rule with a specified id from the organization. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing id to be deleted - throws bad request if null or empty Guid</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdIPFencingIdDeleteAsyncWithHttpInfo (string organizationId, string id, string apiVersion)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingIdDelete");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingIdDelete");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/IPFencing/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdIPFencingIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of an IPFencing entity. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Details of IPFencing patch (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPatch (string organizationId, string id, string apiVersion, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPatchWithHttpInfo(organizationId, id, apiVersion, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates partial details of an IPFencing entity. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Details of IPFencing patch (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPatchWithHttpInfo (string organizationId, string id, string apiVersion, List<Operation> body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPatch");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPatch");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPatch");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/IPFencing/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of an IPFencing entity. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Details of IPFencing patch (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPatchAsync (string organizationId, string id, string apiVersion, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPatchAsyncWithHttpInfo(organizationId, id, apiVersion, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates partial details of an IPFencing entity. 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Details of IPFencing patch (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPatchAsyncWithHttpInfo (string organizationId, string id, string apiVersion, List<Operation> body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPatch");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPatch");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPatch");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/IPFencing/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Update the IPFencing rule Updates the IPFencing with the particular id for the given organization
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">IPFencing id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">New value of the IPFencing to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPut (string organizationId, string id, string apiVersion, IPFencing body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPutWithHttpInfo(organizationId, id, apiVersion, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the IPFencing rule Updates the IPFencing with the particular id for the given organization
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">IPFencing id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">New value of the IPFencing to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPutWithHttpInfo (string organizationId, string id, string apiVersion, IPFencing body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPut");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/IPFencing/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Update the IPFencing rule Updates the IPFencing with the particular id for the given organization
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">IPFencing id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">New value of the IPFencing to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPutAsync (string organizationId, string id, string apiVersion, IPFencing body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPutAsyncWithHttpInfo(organizationId, id, apiVersion, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the IPFencing rule Updates the IPFencing with the particular id for the given organization
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="id">IPFencing id</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">New value of the IPFencing to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPutAsyncWithHttpInfo (string organizationId, string id, string apiVersion, IPFencing body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPut");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/IPFencing/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdIPFencingIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates the IPFencing Mode to AllowMode Updates the IPFencingMode of the specified organizationID to AllowMode
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionOrganizationsOrganizationIdIPFencingModeAllowAllPut (string organizationId, string apiVersion)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionOrganizationsOrganizationIdIPFencingModeAllowAllPutWithHttpInfo(organizationId, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the IPFencing Mode to AllowMode Updates the IPFencingMode of the specified organizationID to AllowMode
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionOrganizationsOrganizationIdIPFencingModeAllowAllPutWithHttpInfo (string organizationId, string apiVersion)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingModeAllowAllPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingModeAllowAllPut");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/IPFencing/Mode/AllowAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdIPFencingModeAllowAllPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates the IPFencing Mode to AllowMode Updates the IPFencingMode of the specified organizationID to AllowMode
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdIPFencingModeAllowAllPutAsync (string organizationId, string apiVersion)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionOrganizationsOrganizationIdIPFencingModeAllowAllPutAsyncWithHttpInfo(organizationId, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the IPFencing Mode to AllowMode Updates the IPFencingMode of the specified organizationID to AllowMode
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdIPFencingModeAllowAllPutAsyncWithHttpInfo (string organizationId, string apiVersion)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingModeAllowAllPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingModeAllowAllPut");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/IPFencing/Mode/AllowAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdIPFencingModeAllowAllPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates the IPFencing Mode to DenyAll Updates the IPFencingMode of the specified organizationID to DenyMode
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionOrganizationsOrganizationIdIPFencingModeDenyAllPut (string organizationId, string apiVersion)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionOrganizationsOrganizationIdIPFencingModeDenyAllPutWithHttpInfo(organizationId, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the IPFencing Mode to DenyAll Updates the IPFencingMode of the specified organizationID to DenyMode
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionOrganizationsOrganizationIdIPFencingModeDenyAllPutWithHttpInfo (string organizationId, string apiVersion)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingModeDenyAllPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingModeDenyAllPut");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/IPFencing/Mode/DenyAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdIPFencingModeDenyAllPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates the IPFencing Mode to DenyAll Updates the IPFencingMode of the specified organizationID to DenyMode
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionOrganizationsOrganizationIdIPFencingModeDenyAllPutAsync (string organizationId, string apiVersion)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionOrganizationsOrganizationIdIPFencingModeDenyAllPutAsyncWithHttpInfo(organizationId, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the IPFencing Mode to DenyAll Updates the IPFencingMode of the specified organizationID to DenyMode
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionOrganizationsOrganizationIdIPFencingModeDenyAllPutAsyncWithHttpInfo (string organizationId, string apiVersion)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingModeDenyAllPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingModeDenyAllPut");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/IPFencing/Mode/DenyAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdIPFencingModeDenyAllPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="apiVersion"></param>
        /// <returns>IPFencingPaginatedList</returns>
        public IPFencingPaginatedList ApiVapiVersionOrganizationsOrganizationIdIPFencingModeGet (string organizationId, string apiVersion)
        {
             ApiResponse<IPFencingPaginatedList> localVarResponse = ApiVapiVersionOrganizationsOrganizationIdIPFencingModeGetWithHttpInfo(organizationId, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of IPFencingPaginatedList</returns>
        public ApiResponse< IPFencingPaginatedList > ApiVapiVersionOrganizationsOrganizationIdIPFencingModeGetWithHttpInfo (string organizationId, string apiVersion)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingModeGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingModeGet");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/IPFencing/Mode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdIPFencingModeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IPFencingPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IPFencingPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IPFencingPaginatedList)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of IPFencingPaginatedList</returns>
        public async System.Threading.Tasks.Task<IPFencingPaginatedList> ApiVapiVersionOrganizationsOrganizationIdIPFencingModeGetAsync (string organizationId, string apiVersion)
        {
             ApiResponse<IPFencingPaginatedList> localVarResponse = await ApiVapiVersionOrganizationsOrganizationIdIPFencingModeGetAsyncWithHttpInfo(organizationId, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (IPFencingPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IPFencingPaginatedList>> ApiVapiVersionOrganizationsOrganizationIdIPFencingModeGetAsyncWithHttpInfo (string organizationId, string apiVersion)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingModeGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingModeGet");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/IPFencing/Mode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdIPFencingModeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IPFencingPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IPFencingPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IPFencingPaginatedList)));
        }

        /// <summary>
        /// Adds a new IPFencing rule with the specified organization ID 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Json containing IPFencing model (optional)</param>
        /// <returns>CreateIPFencingViewModel</returns>
        public CreateIPFencingViewModel ApiVapiVersionOrganizationsOrganizationIdIPFencingPost (string organizationId, string apiVersion, CreateIPFencingViewModel body = null)
        {
             ApiResponse<CreateIPFencingViewModel> localVarResponse = ApiVapiVersionOrganizationsOrganizationIdIPFencingPostWithHttpInfo(organizationId, apiVersion, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new IPFencing rule with the specified organization ID 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Json containing IPFencing model (optional)</param>
        /// <returns>ApiResponse of CreateIPFencingViewModel</returns>
        public ApiResponse< CreateIPFencingViewModel > ApiVapiVersionOrganizationsOrganizationIdIPFencingPostWithHttpInfo (string organizationId, string apiVersion, CreateIPFencingViewModel body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingPost");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingPost");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/IPFencing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdIPFencingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateIPFencingViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateIPFencingViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateIPFencingViewModel)));
        }

        /// <summary>
        /// Adds a new IPFencing rule with the specified organization ID 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Json containing IPFencing model (optional)</param>
        /// <returns>Task of CreateIPFencingViewModel</returns>
        public async System.Threading.Tasks.Task<CreateIPFencingViewModel> ApiVapiVersionOrganizationsOrganizationIdIPFencingPostAsync (string organizationId, string apiVersion, CreateIPFencingViewModel body = null)
        {
             ApiResponse<CreateIPFencingViewModel> localVarResponse = await ApiVapiVersionOrganizationsOrganizationIdIPFencingPostAsyncWithHttpInfo(organizationId, apiVersion, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new IPFencing rule with the specified organization ID 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Json containing IPFencing model (optional)</param>
        /// <returns>Task of ApiResponse (CreateIPFencingViewModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateIPFencingViewModel>> ApiVapiVersionOrganizationsOrganizationIdIPFencingPostAsyncWithHttpInfo (string organizationId, string apiVersion, CreateIPFencingViewModel body = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingPost");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IPFencingApi->ApiVapiVersionOrganizationsOrganizationIdIPFencingPost");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/IPFencing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionOrganizationsOrganizationIdIPFencingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateIPFencingViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateIPFencingViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateIPFencingViewModel)));
        }

        /// <summary>
        /// Provides an IPFencing&#x27;s details for a particular IPFencing ID 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing id</param>
        /// <param name="apiVersion"></param>
        /// <returns>IPFencing</returns>
        public IPFencing GetIPFencing (string organizationId, string id, string apiVersion)
        {
             ApiResponse<IPFencing> localVarResponse = GetIPFencingWithHttpInfo(organizationId, id, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides an IPFencing&#x27;s details for a particular IPFencing ID 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing id</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of IPFencing</returns>
        public ApiResponse< IPFencing > GetIPFencingWithHttpInfo (string organizationId, string id, string apiVersion)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling IPFencingApi->GetIPFencing");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IPFencingApi->GetIPFencing");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IPFencingApi->GetIPFencing");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/IPFencing/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIPFencing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IPFencing>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IPFencing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IPFencing)));
        }

        /// <summary>
        /// Provides an IPFencing&#x27;s details for a particular IPFencing ID 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of IPFencing</returns>
        public async System.Threading.Tasks.Task<IPFencing> GetIPFencingAsync (string organizationId, string id, string apiVersion)
        {
             ApiResponse<IPFencing> localVarResponse = await GetIPFencingAsyncWithHttpInfo(organizationId, id, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides an IPFencing&#x27;s details for a particular IPFencing ID 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="id">IPFencing id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (IPFencing)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IPFencing>> GetIPFencingAsyncWithHttpInfo (string organizationId, string id, string apiVersion)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling IPFencingApi->GetIPFencing");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IPFencingApi->GetIPFencing");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IPFencingApi->GetIPFencing");

            var localVarPath = "/api/v{apiVersion}/Organizations/{organizationId}/IPFencing/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIPFencing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IPFencing>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IPFencing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IPFencing)));
        }

    }
}
