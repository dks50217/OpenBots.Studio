/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Server.SDK.Client;
using OpenBots.Server.SDK.Model;

namespace OpenBots.Server.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAuditLogsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Provides a list of all audit logs by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>List&lt;AuditLogsLookupViewModel&gt;</returns>
        List<AuditLogsLookupViewModel> ApiVapiVersionAuditLogsAuditLogsLookupGet (string apiVersion);

        /// <summary>
        /// Provides a list of all audit logs by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of List&lt;AuditLogsLookupViewModel&gt;</returns>
        ApiResponse<List<AuditLogsLookupViewModel>> ApiVapiVersionAuditLogsAuditLogsLookupGetWithHttpInfo (string apiVersion);
        /// <summary>
        /// Gets count of AuditLogs in database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns></returns>
        void ApiVapiVersionAuditLogsCountGet (string apiVersion, string filter = null);

        /// <summary>
        /// Gets count of AuditLogs in database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiVapiVersionAuditLogsCountGetWithHttpInfo (string apiVersion, string filter = null);
        /// <summary>
        /// Exports audit logs into a downloadable file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">Specifies the file type to be downloaded: csv, zip or, json</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 0)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns></returns>
        void ApiVapiVersionAuditLogsExportFileTypeGet (string fileType, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Exports audit logs into a downloadable file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">Specifies the file type to be downloaded: csv, zip or, json</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 0)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiVapiVersionAuditLogsExportFileTypeGetWithHttpInfo (string fileType, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Provides a list of all audit logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AuditLogViewModelPaginatedList</returns>
        AuditLogViewModelPaginatedList ApiVapiVersionAuditLogsGet (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all audit logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AuditLogViewModelPaginatedList</returns>
        ApiResponse<AuditLogViewModelPaginatedList> ApiVapiVersionAuditLogsGetWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Provides additional details on a specific audit Log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Audit log id</param>
        /// <param name="apiVersion"></param>
        /// <returns>AuditLogPaginatedList</returns>
        AuditLogPaginatedList ApiVapiVersionAuditLogsIdGet (Guid? id, string apiVersion);

        /// <summary>
        /// Provides additional details on a specific audit Log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Audit log id</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of AuditLogPaginatedList</returns>
        ApiResponse<AuditLogPaginatedList> ApiVapiVersionAuditLogsIdGetWithHttpInfo (Guid? id, string apiVersion);
        /// <summary>
        /// Provides additional ViewModel details on a specific audit Log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Audit log id</param>
        /// <param name="apiVersion"></param>
        /// <returns>AuditLogPaginatedList</returns>
        AuditLogPaginatedList ApiVapiVersionAuditLogsIdViewGet (Guid? id, string apiVersion);

        /// <summary>
        /// Provides additional ViewModel details on a specific audit Log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Audit log id</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of AuditLogPaginatedList</returns>
        ApiResponse<AuditLogPaginatedList> ApiVapiVersionAuditLogsIdViewGetWithHttpInfo (Guid? id, string apiVersion);
        /// <summary>
        /// Provides a ViewModel list of all audit logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AuditLogViewModelPaginatedList</returns>
        AuditLogViewModelPaginatedList ApiVapiVersionAuditLogsViewGet (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a ViewModel list of all audit logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AuditLogViewModelPaginatedList</returns>
        ApiResponse<AuditLogViewModelPaginatedList> ApiVapiVersionAuditLogsViewGetWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Provides a list of all audit logs by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of List&lt;AuditLogsLookupViewModel&gt;</returns>
        System.Threading.Tasks.Task<List<AuditLogsLookupViewModel>> ApiVapiVersionAuditLogsAuditLogsLookupGetAsync (string apiVersion);

        /// <summary>
        /// Provides a list of all audit logs by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (List&lt;AuditLogsLookupViewModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AuditLogsLookupViewModel>>> ApiVapiVersionAuditLogsAuditLogsLookupGetAsyncWithHttpInfo (string apiVersion);
        /// <summary>
        /// Gets count of AuditLogs in database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiVapiVersionAuditLogsCountGetAsync (string apiVersion, string filter = null);

        /// <summary>
        /// Gets count of AuditLogs in database
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiVapiVersionAuditLogsCountGetAsyncWithHttpInfo (string apiVersion, string filter = null);
        /// <summary>
        /// Exports audit logs into a downloadable file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">Specifies the file type to be downloaded: csv, zip or, json</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 0)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiVapiVersionAuditLogsExportFileTypeGetAsync (string fileType, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Exports audit logs into a downloadable file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">Specifies the file type to be downloaded: csv, zip or, json</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 0)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiVapiVersionAuditLogsExportFileTypeGetAsyncWithHttpInfo (string fileType, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Provides a list of all audit logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AuditLogViewModelPaginatedList</returns>
        System.Threading.Tasks.Task<AuditLogViewModelPaginatedList> ApiVapiVersionAuditLogsGetAsync (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all audit logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AuditLogViewModelPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditLogViewModelPaginatedList>> ApiVapiVersionAuditLogsGetAsyncWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Provides additional details on a specific audit Log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Audit log id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of AuditLogPaginatedList</returns>
        System.Threading.Tasks.Task<AuditLogPaginatedList> ApiVapiVersionAuditLogsIdGetAsync (Guid? id, string apiVersion);

        /// <summary>
        /// Provides additional details on a specific audit Log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Audit log id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (AuditLogPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditLogPaginatedList>> ApiVapiVersionAuditLogsIdGetAsyncWithHttpInfo (Guid? id, string apiVersion);
        /// <summary>
        /// Provides additional ViewModel details on a specific audit Log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Audit log id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of AuditLogPaginatedList</returns>
        System.Threading.Tasks.Task<AuditLogPaginatedList> ApiVapiVersionAuditLogsIdViewGetAsync (Guid? id, string apiVersion);

        /// <summary>
        /// Provides additional ViewModel details on a specific audit Log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Audit log id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (AuditLogPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditLogPaginatedList>> ApiVapiVersionAuditLogsIdViewGetAsyncWithHttpInfo (Guid? id, string apiVersion);
        /// <summary>
        /// Provides a ViewModel list of all audit logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AuditLogViewModelPaginatedList</returns>
        System.Threading.Tasks.Task<AuditLogViewModelPaginatedList> ApiVapiVersionAuditLogsViewGetAsync (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a ViewModel list of all audit logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AuditLogViewModelPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditLogViewModelPaginatedList>> ApiVapiVersionAuditLogsViewGetAsyncWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AuditLogsApi : IAuditLogsApi
    {
        private OpenBots.Server.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuditLogsApi(String basePath)
        {
            this.Configuration = new OpenBots.Server.SDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AuditLogsApi()
        {
            this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuditLogsApi(OpenBots.Server.SDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Server.SDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Server.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Provides a list of all audit logs by name 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>List&lt;AuditLogsLookupViewModel&gt;</returns>
        public List<AuditLogsLookupViewModel> ApiVapiVersionAuditLogsAuditLogsLookupGet (string apiVersion)
        {
             ApiResponse<List<AuditLogsLookupViewModel>> localVarResponse = ApiVapiVersionAuditLogsAuditLogsLookupGetWithHttpInfo(apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a list of all audit logs by name 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of List&lt;AuditLogsLookupViewModel&gt;</returns>
        public ApiResponse< List<AuditLogsLookupViewModel> > ApiVapiVersionAuditLogsAuditLogsLookupGetWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuditLogsApi->ApiVapiVersionAuditLogsAuditLogsLookupGet");

            var localVarPath = "/api/v{apiVersion}/AuditLogs/AuditLogsLookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAuditLogsAuditLogsLookupGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuditLogsLookupViewModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AuditLogsLookupViewModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuditLogsLookupViewModel>)));
        }

        /// <summary>
        /// Provides a list of all audit logs by name 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of List&lt;AuditLogsLookupViewModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<AuditLogsLookupViewModel>> ApiVapiVersionAuditLogsAuditLogsLookupGetAsync (string apiVersion)
        {
             ApiResponse<List<AuditLogsLookupViewModel>> localVarResponse = await ApiVapiVersionAuditLogsAuditLogsLookupGetAsyncWithHttpInfo(apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a list of all audit logs by name 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (List&lt;AuditLogsLookupViewModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AuditLogsLookupViewModel>>> ApiVapiVersionAuditLogsAuditLogsLookupGetAsyncWithHttpInfo (string apiVersion)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuditLogsApi->ApiVapiVersionAuditLogsAuditLogsLookupGet");

            var localVarPath = "/api/v{apiVersion}/AuditLogs/AuditLogsLookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAuditLogsAuditLogsLookupGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuditLogsLookupViewModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AuditLogsLookupViewModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuditLogsLookupViewModel>)));
        }

        /// <summary>
        /// Gets count of AuditLogs in database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns></returns>
        public void ApiVapiVersionAuditLogsCountGet (string apiVersion, string filter = null)
        {
             ApiVapiVersionAuditLogsCountGetWithHttpInfo(apiVersion, filter);
        }

        /// <summary>
        /// Gets count of AuditLogs in database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiVapiVersionAuditLogsCountGetWithHttpInfo (string apiVersion, string filter = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuditLogsApi->ApiVapiVersionAuditLogsCountGet");

            var localVarPath = "/api/v{apiVersion}/AuditLogs/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAuditLogsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets count of AuditLogs in database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiVapiVersionAuditLogsCountGetAsync (string apiVersion, string filter = null)
        {
             await ApiVapiVersionAuditLogsCountGetAsyncWithHttpInfo(apiVersion, filter);

        }

        /// <summary>
        /// Gets count of AuditLogs in database 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiVapiVersionAuditLogsCountGetAsyncWithHttpInfo (string apiVersion, string filter = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuditLogsApi->ApiVapiVersionAuditLogsCountGet");

            var localVarPath = "/api/v{apiVersion}/AuditLogs/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAuditLogsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Exports audit logs into a downloadable file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">Specifies the file type to be downloaded: csv, zip or, json</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 0)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns></returns>
        public void ApiVapiVersionAuditLogsExportFileTypeGet (string fileType, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiVapiVersionAuditLogsExportFileTypeGetWithHttpInfo(fileType, apiVersion, filter, orderby, top, skip);
        }

        /// <summary>
        /// Exports audit logs into a downloadable file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">Specifies the file type to be downloaded: csv, zip or, json</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 0)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiVapiVersionAuditLogsExportFileTypeGetWithHttpInfo (string fileType, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'fileType' is set
            if (fileType == null)
                throw new ApiException(400, "Missing required parameter 'fileType' when calling AuditLogsApi->ApiVapiVersionAuditLogsExportFileTypeGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuditLogsApi->ApiVapiVersionAuditLogsExportFileTypeGet");

            var localVarPath = "/api/v{apiVersion}/AuditLogs/export/{fileType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv",
                "application/zip",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileType != null) localVarPathParams.Add("fileType", this.Configuration.ApiClient.ParameterToString(fileType)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAuditLogsExportFileTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Exports audit logs into a downloadable file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">Specifies the file type to be downloaded: csv, zip or, json</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 0)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiVapiVersionAuditLogsExportFileTypeGetAsync (string fileType, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             await ApiVapiVersionAuditLogsExportFileTypeGetAsyncWithHttpInfo(fileType, apiVersion, filter, orderby, top, skip);

        }

        /// <summary>
        /// Exports audit logs into a downloadable file 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">Specifies the file type to be downloaded: csv, zip or, json</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 0)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiVapiVersionAuditLogsExportFileTypeGetAsyncWithHttpInfo (string fileType, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'fileType' is set
            if (fileType == null)
                throw new ApiException(400, "Missing required parameter 'fileType' when calling AuditLogsApi->ApiVapiVersionAuditLogsExportFileTypeGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuditLogsApi->ApiVapiVersionAuditLogsExportFileTypeGet");

            var localVarPath = "/api/v{apiVersion}/AuditLogs/export/{fileType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv",
                "application/zip",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileType != null) localVarPathParams.Add("fileType", this.Configuration.ApiClient.ParameterToString(fileType)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAuditLogsExportFileTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Provides a list of all audit logs 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AuditLogViewModelPaginatedList</returns>
        public AuditLogViewModelPaginatedList ApiVapiVersionAuditLogsGet (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<AuditLogViewModelPaginatedList> localVarResponse = ApiVapiVersionAuditLogsGetWithHttpInfo(apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a list of all audit logs 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AuditLogViewModelPaginatedList</returns>
        public ApiResponse< AuditLogViewModelPaginatedList > ApiVapiVersionAuditLogsGetWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuditLogsApi->ApiVapiVersionAuditLogsGet");

            var localVarPath = "/api/v{apiVersion}/AuditLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAuditLogsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLogViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditLogViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLogViewModelPaginatedList)));
        }

        /// <summary>
        /// Provides a list of all audit logs 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AuditLogViewModelPaginatedList</returns>
        public async System.Threading.Tasks.Task<AuditLogViewModelPaginatedList> ApiVapiVersionAuditLogsGetAsync (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<AuditLogViewModelPaginatedList> localVarResponse = await ApiVapiVersionAuditLogsGetAsyncWithHttpInfo(apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a list of all audit logs 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AuditLogViewModelPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuditLogViewModelPaginatedList>> ApiVapiVersionAuditLogsGetAsyncWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuditLogsApi->ApiVapiVersionAuditLogsGet");

            var localVarPath = "/api/v{apiVersion}/AuditLogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAuditLogsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLogViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditLogViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLogViewModelPaginatedList)));
        }

        /// <summary>
        /// Provides additional details on a specific audit Log 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Audit log id</param>
        /// <param name="apiVersion"></param>
        /// <returns>AuditLogPaginatedList</returns>
        public AuditLogPaginatedList ApiVapiVersionAuditLogsIdGet (Guid? id, string apiVersion)
        {
             ApiResponse<AuditLogPaginatedList> localVarResponse = ApiVapiVersionAuditLogsIdGetWithHttpInfo(id, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides additional details on a specific audit Log 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Audit log id</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of AuditLogPaginatedList</returns>
        public ApiResponse< AuditLogPaginatedList > ApiVapiVersionAuditLogsIdGetWithHttpInfo (Guid? id, string apiVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AuditLogsApi->ApiVapiVersionAuditLogsIdGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuditLogsApi->ApiVapiVersionAuditLogsIdGet");

            var localVarPath = "/api/v{apiVersion}/AuditLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAuditLogsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLogPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditLogPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLogPaginatedList)));
        }

        /// <summary>
        /// Provides additional details on a specific audit Log 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Audit log id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of AuditLogPaginatedList</returns>
        public async System.Threading.Tasks.Task<AuditLogPaginatedList> ApiVapiVersionAuditLogsIdGetAsync (Guid? id, string apiVersion)
        {
             ApiResponse<AuditLogPaginatedList> localVarResponse = await ApiVapiVersionAuditLogsIdGetAsyncWithHttpInfo(id, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides additional details on a specific audit Log 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Audit log id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (AuditLogPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuditLogPaginatedList>> ApiVapiVersionAuditLogsIdGetAsyncWithHttpInfo (Guid? id, string apiVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AuditLogsApi->ApiVapiVersionAuditLogsIdGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuditLogsApi->ApiVapiVersionAuditLogsIdGet");

            var localVarPath = "/api/v{apiVersion}/AuditLogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAuditLogsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLogPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditLogPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLogPaginatedList)));
        }

        /// <summary>
        /// Provides additional ViewModel details on a specific audit Log 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Audit log id</param>
        /// <param name="apiVersion"></param>
        /// <returns>AuditLogPaginatedList</returns>
        public AuditLogPaginatedList ApiVapiVersionAuditLogsIdViewGet (Guid? id, string apiVersion)
        {
             ApiResponse<AuditLogPaginatedList> localVarResponse = ApiVapiVersionAuditLogsIdViewGetWithHttpInfo(id, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides additional ViewModel details on a specific audit Log 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Audit log id</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of AuditLogPaginatedList</returns>
        public ApiResponse< AuditLogPaginatedList > ApiVapiVersionAuditLogsIdViewGetWithHttpInfo (Guid? id, string apiVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AuditLogsApi->ApiVapiVersionAuditLogsIdViewGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuditLogsApi->ApiVapiVersionAuditLogsIdViewGet");

            var localVarPath = "/api/v{apiVersion}/AuditLogs/{id}/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAuditLogsIdViewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLogPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditLogPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLogPaginatedList)));
        }

        /// <summary>
        /// Provides additional ViewModel details on a specific audit Log 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Audit log id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of AuditLogPaginatedList</returns>
        public async System.Threading.Tasks.Task<AuditLogPaginatedList> ApiVapiVersionAuditLogsIdViewGetAsync (Guid? id, string apiVersion)
        {
             ApiResponse<AuditLogPaginatedList> localVarResponse = await ApiVapiVersionAuditLogsIdViewGetAsyncWithHttpInfo(id, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides additional ViewModel details on a specific audit Log 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Audit log id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (AuditLogPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuditLogPaginatedList>> ApiVapiVersionAuditLogsIdViewGetAsyncWithHttpInfo (Guid? id, string apiVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AuditLogsApi->ApiVapiVersionAuditLogsIdViewGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuditLogsApi->ApiVapiVersionAuditLogsIdViewGet");

            var localVarPath = "/api/v{apiVersion}/AuditLogs/{id}/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAuditLogsIdViewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLogPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditLogPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLogPaginatedList)));
        }

        /// <summary>
        /// Provides a ViewModel list of all audit logs 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>AuditLogViewModelPaginatedList</returns>
        public AuditLogViewModelPaginatedList ApiVapiVersionAuditLogsViewGet (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<AuditLogViewModelPaginatedList> localVarResponse = ApiVapiVersionAuditLogsViewGetWithHttpInfo(apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a ViewModel list of all audit logs 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AuditLogViewModelPaginatedList</returns>
        public ApiResponse< AuditLogViewModelPaginatedList > ApiVapiVersionAuditLogsViewGetWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuditLogsApi->ApiVapiVersionAuditLogsViewGet");

            var localVarPath = "/api/v{apiVersion}/AuditLogs/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAuditLogsViewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLogViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditLogViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLogViewModelPaginatedList)));
        }

        /// <summary>
        /// Provides a ViewModel list of all audit logs 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of AuditLogViewModelPaginatedList</returns>
        public async System.Threading.Tasks.Task<AuditLogViewModelPaginatedList> ApiVapiVersionAuditLogsViewGetAsync (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<AuditLogViewModelPaginatedList> localVarResponse = await ApiVapiVersionAuditLogsViewGetAsyncWithHttpInfo(apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a ViewModel list of all audit logs 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (AuditLogViewModelPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuditLogViewModelPaginatedList>> ApiVapiVersionAuditLogsViewGetAsyncWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling AuditLogsApi->ApiVapiVersionAuditLogsViewGet");

            var localVarPath = "/api/v{apiVersion}/AuditLogs/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionAuditLogsViewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLogViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuditLogViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLogViewModelPaginatedList)));
        }

    }
}
