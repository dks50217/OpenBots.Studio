/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Server.SDK.Client;
using OpenBots.Server.SDK.Model;

namespace OpenBots.Server.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IIntegrationEventSubscriptionAttemptsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Provides a list of all IntegrationEventSubscriptionAttempts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>IntegrationEventSubscriptionAttemptPaginatedList</returns>
        IntegrationEventSubscriptionAttemptPaginatedList ApiVapiVersionIntegrationEventSubscriptionAttemptsGet (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all IntegrationEventSubscriptionAttempts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of IntegrationEventSubscriptionAttemptPaginatedList</returns>
        ApiResponse<IntegrationEventSubscriptionAttemptPaginatedList> ApiVapiVersionIntegrationEventSubscriptionAttemptsGetWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Provides a view model list of all SubscriptionAttempts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>SubscriptionAttemptViewModelPaginatedList</returns>
        SubscriptionAttemptViewModelPaginatedList ApiVapiVersionIntegrationEventSubscriptionAttemptsViewGet (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a view model list of all SubscriptionAttempts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of SubscriptionAttemptViewModelPaginatedList</returns>
        ApiResponse<SubscriptionAttemptViewModelPaginatedList> ApiVapiVersionIntegrationEventSubscriptionAttemptsViewGetWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Provides a SubscriptionAttempt&#x27;s view model details for a particular SubscriptionAttempt id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">SubscriptionAttempt id</param>
        /// <param name="apiVersion"></param>
        /// <returns>SubscriptionAttemptViewModel</returns>
        SubscriptionAttemptViewModel ApiVapiVersionIntegrationEventSubscriptionAttemptsViewIdGet (string id, string apiVersion);

        /// <summary>
        /// Provides a SubscriptionAttempt&#x27;s view model details for a particular SubscriptionAttempt id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">SubscriptionAttempt id</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of SubscriptionAttemptViewModel</returns>
        ApiResponse<SubscriptionAttemptViewModel> ApiVapiVersionIntegrationEventSubscriptionAttemptsViewIdGetWithHttpInfo (string id, string apiVersion);
        /// <summary>
        /// Provides an IntegrationEventSubscriptionAttempt&#x27;s details for a particular id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">IntegrationEventSubscriptionAttempt id</param>
        /// <param name="apiVersion"></param>
        /// <returns>IntegrationEventSubscriptionAttempt</returns>
        IntegrationEventSubscriptionAttempt GetIntegrationEventSubscriptionAttempt (string id, string apiVersion);

        /// <summary>
        /// Provides an IntegrationEventSubscriptionAttempt&#x27;s details for a particular id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">IntegrationEventSubscriptionAttempt id</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of IntegrationEventSubscriptionAttempt</returns>
        ApiResponse<IntegrationEventSubscriptionAttempt> GetIntegrationEventSubscriptionAttemptWithHttpInfo (string id, string apiVersion);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Provides a list of all IntegrationEventSubscriptionAttempts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of IntegrationEventSubscriptionAttemptPaginatedList</returns>
        System.Threading.Tasks.Task<IntegrationEventSubscriptionAttemptPaginatedList> ApiVapiVersionIntegrationEventSubscriptionAttemptsGetAsync (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a list of all IntegrationEventSubscriptionAttempts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (IntegrationEventSubscriptionAttemptPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntegrationEventSubscriptionAttemptPaginatedList>> ApiVapiVersionIntegrationEventSubscriptionAttemptsGetAsyncWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Provides a view model list of all SubscriptionAttempts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of SubscriptionAttemptViewModelPaginatedList</returns>
        System.Threading.Tasks.Task<SubscriptionAttemptViewModelPaginatedList> ApiVapiVersionIntegrationEventSubscriptionAttemptsViewGetAsync (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Provides a view model list of all SubscriptionAttempts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (SubscriptionAttemptViewModelPaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionAttemptViewModelPaginatedList>> ApiVapiVersionIntegrationEventSubscriptionAttemptsViewGetAsyncWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Provides a SubscriptionAttempt&#x27;s view model details for a particular SubscriptionAttempt id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">SubscriptionAttempt id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of SubscriptionAttemptViewModel</returns>
        System.Threading.Tasks.Task<SubscriptionAttemptViewModel> ApiVapiVersionIntegrationEventSubscriptionAttemptsViewIdGetAsync (string id, string apiVersion);

        /// <summary>
        /// Provides a SubscriptionAttempt&#x27;s view model details for a particular SubscriptionAttempt id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">SubscriptionAttempt id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (SubscriptionAttemptViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionAttemptViewModel>> ApiVapiVersionIntegrationEventSubscriptionAttemptsViewIdGetAsyncWithHttpInfo (string id, string apiVersion);
        /// <summary>
        /// Provides an IntegrationEventSubscriptionAttempt&#x27;s details for a particular id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">IntegrationEventSubscriptionAttempt id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of IntegrationEventSubscriptionAttempt</returns>
        System.Threading.Tasks.Task<IntegrationEventSubscriptionAttempt> GetIntegrationEventSubscriptionAttemptAsync (string id, string apiVersion);

        /// <summary>
        /// Provides an IntegrationEventSubscriptionAttempt&#x27;s details for a particular id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">IntegrationEventSubscriptionAttempt id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (IntegrationEventSubscriptionAttempt)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntegrationEventSubscriptionAttempt>> GetIntegrationEventSubscriptionAttemptAsyncWithHttpInfo (string id, string apiVersion);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class IntegrationEventSubscriptionAttemptsApi : IIntegrationEventSubscriptionAttemptsApi
    {
        private OpenBots.Server.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationEventSubscriptionAttemptsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IntegrationEventSubscriptionAttemptsApi(String basePath)
        {
            this.Configuration = new OpenBots.Server.SDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationEventSubscriptionAttemptsApi"/> class
        /// </summary>
        /// <returns></returns>
        public IntegrationEventSubscriptionAttemptsApi()
        {
            this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationEventSubscriptionAttemptsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IntegrationEventSubscriptionAttemptsApi(OpenBots.Server.SDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Server.SDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Server.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Provides a list of all IntegrationEventSubscriptionAttempts 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>IntegrationEventSubscriptionAttemptPaginatedList</returns>
        public IntegrationEventSubscriptionAttemptPaginatedList ApiVapiVersionIntegrationEventSubscriptionAttemptsGet (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<IntegrationEventSubscriptionAttemptPaginatedList> localVarResponse = ApiVapiVersionIntegrationEventSubscriptionAttemptsGetWithHttpInfo(apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a list of all IntegrationEventSubscriptionAttempts 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of IntegrationEventSubscriptionAttemptPaginatedList</returns>
        public ApiResponse< IntegrationEventSubscriptionAttemptPaginatedList > ApiVapiVersionIntegrationEventSubscriptionAttemptsGetWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IntegrationEventSubscriptionAttemptsApi->ApiVapiVersionIntegrationEventSubscriptionAttemptsGet");

            var localVarPath = "/api/v{apiVersion}/IntegrationEventSubscriptionAttempts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionIntegrationEventSubscriptionAttemptsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationEventSubscriptionAttemptPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IntegrationEventSubscriptionAttemptPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationEventSubscriptionAttemptPaginatedList)));
        }

        /// <summary>
        /// Provides a list of all IntegrationEventSubscriptionAttempts 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of IntegrationEventSubscriptionAttemptPaginatedList</returns>
        public async System.Threading.Tasks.Task<IntegrationEventSubscriptionAttemptPaginatedList> ApiVapiVersionIntegrationEventSubscriptionAttemptsGetAsync (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<IntegrationEventSubscriptionAttemptPaginatedList> localVarResponse = await ApiVapiVersionIntegrationEventSubscriptionAttemptsGetAsyncWithHttpInfo(apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a list of all IntegrationEventSubscriptionAttempts 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (IntegrationEventSubscriptionAttemptPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IntegrationEventSubscriptionAttemptPaginatedList>> ApiVapiVersionIntegrationEventSubscriptionAttemptsGetAsyncWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IntegrationEventSubscriptionAttemptsApi->ApiVapiVersionIntegrationEventSubscriptionAttemptsGet");

            var localVarPath = "/api/v{apiVersion}/IntegrationEventSubscriptionAttempts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionIntegrationEventSubscriptionAttemptsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationEventSubscriptionAttemptPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IntegrationEventSubscriptionAttemptPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationEventSubscriptionAttemptPaginatedList)));
        }

        /// <summary>
        /// Provides a view model list of all SubscriptionAttempts 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>SubscriptionAttemptViewModelPaginatedList</returns>
        public SubscriptionAttemptViewModelPaginatedList ApiVapiVersionIntegrationEventSubscriptionAttemptsViewGet (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<SubscriptionAttemptViewModelPaginatedList> localVarResponse = ApiVapiVersionIntegrationEventSubscriptionAttemptsViewGetWithHttpInfo(apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a view model list of all SubscriptionAttempts 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of SubscriptionAttemptViewModelPaginatedList</returns>
        public ApiResponse< SubscriptionAttemptViewModelPaginatedList > ApiVapiVersionIntegrationEventSubscriptionAttemptsViewGetWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IntegrationEventSubscriptionAttemptsApi->ApiVapiVersionIntegrationEventSubscriptionAttemptsViewGet");

            var localVarPath = "/api/v{apiVersion}/IntegrationEventSubscriptionAttempts/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionIntegrationEventSubscriptionAttemptsViewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionAttemptViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubscriptionAttemptViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionAttemptViewModelPaginatedList)));
        }

        /// <summary>
        /// Provides a view model list of all SubscriptionAttempts 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of SubscriptionAttemptViewModelPaginatedList</returns>
        public async System.Threading.Tasks.Task<SubscriptionAttemptViewModelPaginatedList> ApiVapiVersionIntegrationEventSubscriptionAttemptsViewGetAsync (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<SubscriptionAttemptViewModelPaginatedList> localVarResponse = await ApiVapiVersionIntegrationEventSubscriptionAttemptsViewGetAsyncWithHttpInfo(apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a view model list of all SubscriptionAttempts 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top"> (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (SubscriptionAttemptViewModelPaginatedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionAttemptViewModelPaginatedList>> ApiVapiVersionIntegrationEventSubscriptionAttemptsViewGetAsyncWithHttpInfo (string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IntegrationEventSubscriptionAttemptsApi->ApiVapiVersionIntegrationEventSubscriptionAttemptsViewGet");

            var localVarPath = "/api/v{apiVersion}/IntegrationEventSubscriptionAttempts/view";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionIntegrationEventSubscriptionAttemptsViewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionAttemptViewModelPaginatedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubscriptionAttemptViewModelPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionAttemptViewModelPaginatedList)));
        }

        /// <summary>
        /// Provides a SubscriptionAttempt&#x27;s view model details for a particular SubscriptionAttempt id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">SubscriptionAttempt id</param>
        /// <param name="apiVersion"></param>
        /// <returns>SubscriptionAttemptViewModel</returns>
        public SubscriptionAttemptViewModel ApiVapiVersionIntegrationEventSubscriptionAttemptsViewIdGet (string id, string apiVersion)
        {
             ApiResponse<SubscriptionAttemptViewModel> localVarResponse = ApiVapiVersionIntegrationEventSubscriptionAttemptsViewIdGetWithHttpInfo(id, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a SubscriptionAttempt&#x27;s view model details for a particular SubscriptionAttempt id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">SubscriptionAttempt id</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of SubscriptionAttemptViewModel</returns>
        public ApiResponse< SubscriptionAttemptViewModel > ApiVapiVersionIntegrationEventSubscriptionAttemptsViewIdGetWithHttpInfo (string id, string apiVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IntegrationEventSubscriptionAttemptsApi->ApiVapiVersionIntegrationEventSubscriptionAttemptsViewIdGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IntegrationEventSubscriptionAttemptsApi->ApiVapiVersionIntegrationEventSubscriptionAttemptsViewIdGet");

            var localVarPath = "/api/v{apiVersion}/IntegrationEventSubscriptionAttempts/view/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionIntegrationEventSubscriptionAttemptsViewIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionAttemptViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubscriptionAttemptViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionAttemptViewModel)));
        }

        /// <summary>
        /// Provides a SubscriptionAttempt&#x27;s view model details for a particular SubscriptionAttempt id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">SubscriptionAttempt id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of SubscriptionAttemptViewModel</returns>
        public async System.Threading.Tasks.Task<SubscriptionAttemptViewModel> ApiVapiVersionIntegrationEventSubscriptionAttemptsViewIdGetAsync (string id, string apiVersion)
        {
             ApiResponse<SubscriptionAttemptViewModel> localVarResponse = await ApiVapiVersionIntegrationEventSubscriptionAttemptsViewIdGetAsyncWithHttpInfo(id, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a SubscriptionAttempt&#x27;s view model details for a particular SubscriptionAttempt id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">SubscriptionAttempt id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (SubscriptionAttemptViewModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionAttemptViewModel>> ApiVapiVersionIntegrationEventSubscriptionAttemptsViewIdGetAsyncWithHttpInfo (string id, string apiVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IntegrationEventSubscriptionAttemptsApi->ApiVapiVersionIntegrationEventSubscriptionAttemptsViewIdGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IntegrationEventSubscriptionAttemptsApi->ApiVapiVersionIntegrationEventSubscriptionAttemptsViewIdGet");

            var localVarPath = "/api/v{apiVersion}/IntegrationEventSubscriptionAttempts/view/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionIntegrationEventSubscriptionAttemptsViewIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionAttemptViewModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubscriptionAttemptViewModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionAttemptViewModel)));
        }

        /// <summary>
        /// Provides an IntegrationEventSubscriptionAttempt&#x27;s details for a particular id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">IntegrationEventSubscriptionAttempt id</param>
        /// <param name="apiVersion"></param>
        /// <returns>IntegrationEventSubscriptionAttempt</returns>
        public IntegrationEventSubscriptionAttempt GetIntegrationEventSubscriptionAttempt (string id, string apiVersion)
        {
             ApiResponse<IntegrationEventSubscriptionAttempt> localVarResponse = GetIntegrationEventSubscriptionAttemptWithHttpInfo(id, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides an IntegrationEventSubscriptionAttempt&#x27;s details for a particular id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">IntegrationEventSubscriptionAttempt id</param>
        /// <param name="apiVersion"></param>
        /// <returns>ApiResponse of IntegrationEventSubscriptionAttempt</returns>
        public ApiResponse< IntegrationEventSubscriptionAttempt > GetIntegrationEventSubscriptionAttemptWithHttpInfo (string id, string apiVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IntegrationEventSubscriptionAttemptsApi->GetIntegrationEventSubscriptionAttempt");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IntegrationEventSubscriptionAttemptsApi->GetIntegrationEventSubscriptionAttempt");

            var localVarPath = "/api/v{apiVersion}/IntegrationEventSubscriptionAttempts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntegrationEventSubscriptionAttempt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationEventSubscriptionAttempt>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IntegrationEventSubscriptionAttempt) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationEventSubscriptionAttempt)));
        }

        /// <summary>
        /// Provides an IntegrationEventSubscriptionAttempt&#x27;s details for a particular id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">IntegrationEventSubscriptionAttempt id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of IntegrationEventSubscriptionAttempt</returns>
        public async System.Threading.Tasks.Task<IntegrationEventSubscriptionAttempt> GetIntegrationEventSubscriptionAttemptAsync (string id, string apiVersion)
        {
             ApiResponse<IntegrationEventSubscriptionAttempt> localVarResponse = await GetIntegrationEventSubscriptionAttemptAsyncWithHttpInfo(id, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides an IntegrationEventSubscriptionAttempt&#x27;s details for a particular id 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">IntegrationEventSubscriptionAttempt id</param>
        /// <param name="apiVersion"></param>
        /// <returns>Task of ApiResponse (IntegrationEventSubscriptionAttempt)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IntegrationEventSubscriptionAttempt>> GetIntegrationEventSubscriptionAttemptAsyncWithHttpInfo (string id, string apiVersion)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IntegrationEventSubscriptionAttemptsApi->GetIntegrationEventSubscriptionAttempt");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling IntegrationEventSubscriptionAttemptsApi->GetIntegrationEventSubscriptionAttempt");

            var localVarPath = "/api/v{apiVersion}/IntegrationEventSubscriptionAttempts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntegrationEventSubscriptionAttempt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegrationEventSubscriptionAttempt>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IntegrationEventSubscriptionAttempt) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationEventSubscriptionAttempt)));
        }

    }
}
