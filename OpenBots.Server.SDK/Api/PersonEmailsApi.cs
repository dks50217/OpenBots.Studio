/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OpenBots.Server.SDK.Client;
using OpenBots.Server.SDK.Model;

namespace OpenBots.Server.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IPersonEmailsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets all the email address and verification id for a particular person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top">returns the top 100 (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>PersonEmail</returns>
        PersonEmail ApiVapiVersionPeoplePersonIdPersonEmailsGet (string personId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Gets all the email address and verification id for a particular person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top">returns the top 100 (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of PersonEmail</returns>
        ApiResponse<PersonEmail> ApiVapiVersionPeoplePersonIdPersonEmailsGetWithHttpInfo (string personId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Deletes the email details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionPeoplePersonIdPersonEmailsIdDelete (string id, string apiVersion, string personId);

        /// <summary>
        /// Deletes the email details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionPeoplePersonIdPersonEmailsIdDeleteWithHttpInfo (string id, string apiVersion, string personId);
        /// <summary>
        /// Updates partial details of email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Person email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionPeoplePersonIdPersonEmailsIdPatch (string id, string apiVersion, string personId, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Person email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionPeoplePersonIdPersonEmailsIdPatchWithHttpInfo (string id, string apiVersion, string personId, List<Operation> body = null);
        /// <summary>
        /// Updates the email details for person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        IActionResult ApiVapiVersionPeoplePersonIdPersonEmailsIdPut (string personId, string id, string apiVersion, PersonEmail body = null);

        /// <summary>
        /// Updates the email details for person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        ApiResponse<IActionResult> ApiVapiVersionPeoplePersonIdPersonEmailsIdPutWithHttpInfo (string personId, string id, string apiVersion, PersonEmail body = null);
        /// <summary>
        /// Adds a new email id and verification id for a person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Email details to be added (optional)</param>
        /// <returns>PersonEmail</returns>
        PersonEmail ApiVapiVersionPeoplePersonIdPersonEmailsPost (string personId, string apiVersion, PersonEmail body = null);

        /// <summary>
        /// Adds a new email id and verification id for a person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Email details to be added (optional)</param>
        /// <returns>ApiResponse of PersonEmail</returns>
        ApiResponse<PersonEmail> ApiVapiVersionPeoplePersonIdPersonEmailsPostWithHttpInfo (string personId, string apiVersion, PersonEmail body = null);
        /// <summary>
        /// Gets the email address and verfiication id for a particular email for person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <returns>PersonEmail</returns>
        PersonEmail GetPersonEmail (string id, string apiVersion, string personId);

        /// <summary>
        /// Gets the email address and verfiication id for a particular email for person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <returns>ApiResponse of PersonEmail</returns>
        ApiResponse<PersonEmail> GetPersonEmailWithHttpInfo (string id, string apiVersion, string personId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets all the email address and verification id for a particular person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top">returns the top 100 (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of PersonEmail</returns>
        System.Threading.Tasks.Task<PersonEmail> ApiVapiVersionPeoplePersonIdPersonEmailsGetAsync (string personId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Gets all the email address and verification id for a particular person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top">returns the top 100 (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (PersonEmail)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonEmail>> ApiVapiVersionPeoplePersonIdPersonEmailsGetAsyncWithHttpInfo (string personId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Deletes the email details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionPeoplePersonIdPersonEmailsIdDeleteAsync (string id, string apiVersion, string personId);

        /// <summary>
        /// Deletes the email details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionPeoplePersonIdPersonEmailsIdDeleteAsyncWithHttpInfo (string id, string apiVersion, string personId);
        /// <summary>
        /// Updates partial details of email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Person email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionPeoplePersonIdPersonEmailsIdPatchAsync (string id, string apiVersion, string personId, List<Operation> body = null);

        /// <summary>
        /// Updates partial details of email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Person email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionPeoplePersonIdPersonEmailsIdPatchAsyncWithHttpInfo (string id, string apiVersion, string personId, List<Operation> body = null);
        /// <summary>
        /// Updates the email details for person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        System.Threading.Tasks.Task<IActionResult> ApiVapiVersionPeoplePersonIdPersonEmailsIdPutAsync (string personId, string id, string apiVersion, PersonEmail body = null);

        /// <summary>
        /// Updates the email details for person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionPeoplePersonIdPersonEmailsIdPutAsyncWithHttpInfo (string personId, string id, string apiVersion, PersonEmail body = null);
        /// <summary>
        /// Adds a new email id and verification id for a person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Email details to be added (optional)</param>
        /// <returns>Task of PersonEmail</returns>
        System.Threading.Tasks.Task<PersonEmail> ApiVapiVersionPeoplePersonIdPersonEmailsPostAsync (string personId, string apiVersion, PersonEmail body = null);

        /// <summary>
        /// Adds a new email id and verification id for a person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Email details to be added (optional)</param>
        /// <returns>Task of ApiResponse (PersonEmail)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonEmail>> ApiVapiVersionPeoplePersonIdPersonEmailsPostAsyncWithHttpInfo (string personId, string apiVersion, PersonEmail body = null);
        /// <summary>
        /// Gets the email address and verfiication id for a particular email for person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <returns>Task of PersonEmail</returns>
        System.Threading.Tasks.Task<PersonEmail> GetPersonEmailAsync (string id, string apiVersion, string personId);

        /// <summary>
        /// Gets the email address and verfiication id for a particular email for person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <returns>Task of ApiResponse (PersonEmail)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonEmail>> GetPersonEmailAsyncWithHttpInfo (string id, string apiVersion, string personId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class PersonEmailsApi : IPersonEmailsApi
    {
        private OpenBots.Server.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonEmailsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonEmailsApi(String basePath)
        {
            this.Configuration = new OpenBots.Server.SDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonEmailsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PersonEmailsApi()
        {
            this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonEmailsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PersonEmailsApi(OpenBots.Server.SDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = OpenBots.Server.SDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OpenBots.Server.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenBots.Server.SDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenBots.Server.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets all the email address and verification id for a particular person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top">returns the top 100 (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>PersonEmail</returns>
        public PersonEmail ApiVapiVersionPeoplePersonIdPersonEmailsGet (string personId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<PersonEmail> localVarResponse = ApiVapiVersionPeoplePersonIdPersonEmailsGetWithHttpInfo(personId, apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all the email address and verification id for a particular person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top">returns the top 100 (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>ApiResponse of PersonEmail</returns>
        public ApiResponse< PersonEmail > ApiVapiVersionPeoplePersonIdPersonEmailsGetWithHttpInfo (string personId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsGet");

            var localVarPath = "/api/v{apiVersion}/People/{personId}/PersonEmails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionPeoplePersonIdPersonEmailsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonEmail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PersonEmail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonEmail)));
        }

        /// <summary>
        /// Gets all the email address and verification id for a particular person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top">returns the top 100 (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of PersonEmail</returns>
        public async System.Threading.Tasks.Task<PersonEmail> ApiVapiVersionPeoplePersonIdPersonEmailsGetAsync (string personId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<PersonEmail> localVarResponse = await ApiVapiVersionPeoplePersonIdPersonEmailsGetAsyncWithHttpInfo(personId, apiVersion, filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all the email address and verification id for a particular person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="top">returns the top 100 (optional, default to 100)</param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (PersonEmail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonEmail>> ApiVapiVersionPeoplePersonIdPersonEmailsGetAsyncWithHttpInfo (string personId, string apiVersion, string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsGet");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsGet");

            var localVarPath = "/api/v{apiVersion}/People/{personId}/PersonEmails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionPeoplePersonIdPersonEmailsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonEmail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PersonEmail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonEmail)));
        }

        /// <summary>
        /// Deletes the email details 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionPeoplePersonIdPersonEmailsIdDelete (string id, string apiVersion, string personId)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionPeoplePersonIdPersonEmailsIdDeleteWithHttpInfo(id, apiVersion, personId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the email details 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionPeoplePersonIdPersonEmailsIdDeleteWithHttpInfo (string id, string apiVersion, string personId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsIdDelete");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsIdDelete");
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsIdDelete");

            var localVarPath = "/api/v{apiVersion}/People/{personId}/PersonEmails/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionPeoplePersonIdPersonEmailsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Deletes the email details 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionPeoplePersonIdPersonEmailsIdDeleteAsync (string id, string apiVersion, string personId)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionPeoplePersonIdPersonEmailsIdDeleteAsyncWithHttpInfo(id, apiVersion, personId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the email details 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionPeoplePersonIdPersonEmailsIdDeleteAsyncWithHttpInfo (string id, string apiVersion, string personId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsIdDelete");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsIdDelete");
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsIdDelete");

            var localVarPath = "/api/v{apiVersion}/People/{personId}/PersonEmails/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionPeoplePersonIdPersonEmailsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of email 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Person email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionPeoplePersonIdPersonEmailsIdPatch (string id, string apiVersion, string personId, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionPeoplePersonIdPersonEmailsIdPatchWithHttpInfo(id, apiVersion, personId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates partial details of email 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Person email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionPeoplePersonIdPersonEmailsIdPatchWithHttpInfo (string id, string apiVersion, string personId, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsIdPatch");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsIdPatch");
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsIdPatch");

            var localVarPath = "/api/v{apiVersion}/People/{personId}/PersonEmails/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionPeoplePersonIdPersonEmailsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates partial details of email 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Person email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionPeoplePersonIdPersonEmailsIdPatchAsync (string id, string apiVersion, string personId, List<Operation> body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionPeoplePersonIdPersonEmailsIdPatchAsyncWithHttpInfo(id, apiVersion, personId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates partial details of email 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Person email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionPeoplePersonIdPersonEmailsIdPatchAsyncWithHttpInfo (string id, string apiVersion, string personId, List<Operation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsIdPatch");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsIdPatch");
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsIdPatch");

            var localVarPath = "/api/v{apiVersion}/People/{personId}/PersonEmails/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionPeoplePersonIdPersonEmailsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates the email details for person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>IActionResult</returns>
        public IActionResult ApiVapiVersionPeoplePersonIdPersonEmailsIdPut (string personId, string id, string apiVersion, PersonEmail body = null)
        {
             ApiResponse<IActionResult> localVarResponse = ApiVapiVersionPeoplePersonIdPersonEmailsIdPutWithHttpInfo(personId, id, apiVersion, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the email details for person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>ApiResponse of IActionResult</returns>
        public ApiResponse< IActionResult > ApiVapiVersionPeoplePersonIdPersonEmailsIdPutWithHttpInfo (string personId, string id, string apiVersion, PersonEmail body = null)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsIdPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsIdPut");

            var localVarPath = "/api/v{apiVersion}/People/{personId}/PersonEmails/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionPeoplePersonIdPersonEmailsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Updates the email details for person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>Task of IActionResult</returns>
        public async System.Threading.Tasks.Task<IActionResult> ApiVapiVersionPeoplePersonIdPersonEmailsIdPutAsync (string personId, string id, string apiVersion, PersonEmail body = null)
        {
             ApiResponse<IActionResult> localVarResponse = await ApiVapiVersionPeoplePersonIdPersonEmailsIdPutAsyncWithHttpInfo(personId, id, apiVersion, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the email details for person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Value to be updated (optional)</param>
        /// <returns>Task of ApiResponse (IActionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiVapiVersionPeoplePersonIdPersonEmailsIdPutAsyncWithHttpInfo (string personId, string id, string apiVersion, PersonEmail body = null)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsIdPut");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsIdPut");

            var localVarPath = "/api/v{apiVersion}/People/{personId}/PersonEmails/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionPeoplePersonIdPersonEmailsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IActionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
        }

        /// <summary>
        /// Adds a new email id and verification id for a person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Email details to be added (optional)</param>
        /// <returns>PersonEmail</returns>
        public PersonEmail ApiVapiVersionPeoplePersonIdPersonEmailsPost (string personId, string apiVersion, PersonEmail body = null)
        {
             ApiResponse<PersonEmail> localVarResponse = ApiVapiVersionPeoplePersonIdPersonEmailsPostWithHttpInfo(personId, apiVersion, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new email id and verification id for a person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Email details to be added (optional)</param>
        /// <returns>ApiResponse of PersonEmail</returns>
        public ApiResponse< PersonEmail > ApiVapiVersionPeoplePersonIdPersonEmailsPostWithHttpInfo (string personId, string apiVersion, PersonEmail body = null)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsPost");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsPost");

            var localVarPath = "/api/v{apiVersion}/People/{personId}/PersonEmails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionPeoplePersonIdPersonEmailsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonEmail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PersonEmail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonEmail)));
        }

        /// <summary>
        /// Adds a new email id and verification id for a person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Email details to be added (optional)</param>
        /// <returns>Task of PersonEmail</returns>
        public async System.Threading.Tasks.Task<PersonEmail> ApiVapiVersionPeoplePersonIdPersonEmailsPostAsync (string personId, string apiVersion, PersonEmail body = null)
        {
             ApiResponse<PersonEmail> localVarResponse = await ApiVapiVersionPeoplePersonIdPersonEmailsPostAsyncWithHttpInfo(personId, apiVersion, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new email id and verification id for a person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="body">Email details to be added (optional)</param>
        /// <returns>Task of ApiResponse (PersonEmail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonEmail>> ApiVapiVersionPeoplePersonIdPersonEmailsPostAsyncWithHttpInfo (string personId, string apiVersion, PersonEmail body = null)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsPost");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling PersonEmailsApi->ApiVapiVersionPeoplePersonIdPersonEmailsPost");

            var localVarPath = "/api/v{apiVersion}/People/{personId}/PersonEmails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiVapiVersionPeoplePersonIdPersonEmailsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonEmail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PersonEmail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonEmail)));
        }

        /// <summary>
        /// Gets the email address and verfiication id for a particular email for person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <returns>PersonEmail</returns>
        public PersonEmail GetPersonEmail (string id, string apiVersion, string personId)
        {
             ApiResponse<PersonEmail> localVarResponse = GetPersonEmailWithHttpInfo(id, apiVersion, personId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the email address and verfiication id for a particular email for person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <returns>ApiResponse of PersonEmail</returns>
        public ApiResponse< PersonEmail > GetPersonEmailWithHttpInfo (string id, string apiVersion, string personId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PersonEmailsApi->GetPersonEmail");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling PersonEmailsApi->GetPersonEmail");
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonEmailsApi->GetPersonEmail");

            var localVarPath = "/api/v{apiVersion}/People/{personId}/PersonEmails/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersonEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonEmail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PersonEmail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonEmail)));
        }

        /// <summary>
        /// Gets the email address and verfiication id for a particular email for person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <returns>Task of PersonEmail</returns>
        public async System.Threading.Tasks.Task<PersonEmail> GetPersonEmailAsync (string id, string apiVersion, string personId)
        {
             ApiResponse<PersonEmail> localVarResponse = await GetPersonEmailAsyncWithHttpInfo(id, apiVersion, personId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the email address and verfiication id for a particular email for person 
        /// </summary>
        /// <exception cref="OpenBots.Server.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Email identifier</param>
        /// <param name="apiVersion"></param>
        /// <param name="personId"></param>
        /// <returns>Task of ApiResponse (PersonEmail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonEmail>> GetPersonEmailAsyncWithHttpInfo (string id, string apiVersion, string personId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PersonEmailsApi->GetPersonEmail");
            // verify the required parameter 'apiVersion' is set
            if (apiVersion == null)
                throw new ApiException(400, "Missing required parameter 'apiVersion' when calling PersonEmailsApi->GetPersonEmail");
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonEmailsApi->GetPersonEmail");

            var localVarPath = "/api/v{apiVersion}/People/{personId}/PersonEmails/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (apiVersion != null) localVarPathParams.Add("apiVersion", this.Configuration.ApiClient.ParameterToString(apiVersion)); // path parameter
            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            // authentication (oauth2) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersonEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonEmail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PersonEmail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonEmail)));
        }

    }
}
