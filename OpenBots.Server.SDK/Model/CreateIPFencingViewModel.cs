/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Server.SDK.Client.SwaggerDateConverter;

namespace OpenBots.Server.SDK.Model
{
    /// <summary>
    /// CreateIPFencingViewModel
    /// </summary>
    [DataContract]
        public partial class CreateIPFencingViewModel :  IEquatable<CreateIPFencingViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateIPFencingViewModel" /> class.
        /// </summary>
        /// <param name="usage">usage (required).</param>
        /// <param name="rule">rule (required).</param>
        /// <param name="ipAddress">ipAddress.</param>
        /// <param name="ipRange">ipRange.</param>
        /// <param name="headerName">headerName.</param>
        /// <param name="headerValue">headerValue.</param>
        public CreateIPFencingViewModel(UsageType usage = default(UsageType), RuleType rule = default(RuleType), string ipAddress = default(string), string ipRange = default(string), string headerName = default(string), string headerValue = default(string))
        {
            // to ensure "usage" is required (not null)
            if (usage == null)
            {
                throw new InvalidDataException("usage is a required property for CreateIPFencingViewModel and cannot be null");
            }
            else
            {
                this.Usage = usage;
            }
            // to ensure "rule" is required (not null)
            if (rule == null)
            {
                throw new InvalidDataException("rule is a required property for CreateIPFencingViewModel and cannot be null");
            }
            else
            {
                this.Rule = rule;
            }
            this.IpAddress = ipAddress;
            this.IpRange = ipRange;
            this.HeaderName = headerName;
            this.HeaderValue = headerValue;
        }
        
        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name="usage", EmitDefaultValue=false)]
        public UsageType Usage { get; set; }

        /// <summary>
        /// Gets or Sets Rule
        /// </summary>
        [DataMember(Name="rule", EmitDefaultValue=false)]
        public RuleType Rule { get; set; }

        /// <summary>
        /// Gets or Sets IpAddress
        /// </summary>
        [DataMember(Name="ipAddress", EmitDefaultValue=false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or Sets IpRange
        /// </summary>
        [DataMember(Name="ipRange", EmitDefaultValue=false)]
        public string IpRange { get; set; }

        /// <summary>
        /// Gets or Sets HeaderName
        /// </summary>
        [DataMember(Name="headerName", EmitDefaultValue=false)]
        public string HeaderName { get; set; }

        /// <summary>
        /// Gets or Sets HeaderValue
        /// </summary>
        [DataMember(Name="headerValue", EmitDefaultValue=false)]
        public string HeaderValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateIPFencingViewModel {\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("  Rule: ").Append(Rule).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  IpRange: ").Append(IpRange).Append("\n");
            sb.Append("  HeaderName: ").Append(HeaderName).Append("\n");
            sb.Append("  HeaderValue: ").Append(HeaderValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateIPFencingViewModel);
        }

        /// <summary>
        /// Returns true if CreateIPFencingViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateIPFencingViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateIPFencingViewModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Usage == input.Usage ||
                    (this.Usage != null &&
                    this.Usage.Equals(input.Usage))
                ) && 
                (
                    this.Rule == input.Rule ||
                    (this.Rule != null &&
                    this.Rule.Equals(input.Rule))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.IpRange == input.IpRange ||
                    (this.IpRange != null &&
                    this.IpRange.Equals(input.IpRange))
                ) && 
                (
                    this.HeaderName == input.HeaderName ||
                    (this.HeaderName != null &&
                    this.HeaderName.Equals(input.HeaderName))
                ) && 
                (
                    this.HeaderValue == input.HeaderValue ||
                    (this.HeaderValue != null &&
                    this.HeaderValue.Equals(input.HeaderValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Usage != null)
                    hashCode = hashCode * 59 + this.Usage.GetHashCode();
                if (this.Rule != null)
                    hashCode = hashCode * 59 + this.Rule.GetHashCode();
                if (this.IpAddress != null)
                    hashCode = hashCode * 59 + this.IpAddress.GetHashCode();
                if (this.IpRange != null)
                    hashCode = hashCode * 59 + this.IpRange.GetHashCode();
                if (this.HeaderName != null)
                    hashCode = hashCode * 59 + this.HeaderName.GetHashCode();
                if (this.HeaderValue != null)
                    hashCode = hashCode * 59 + this.HeaderValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
