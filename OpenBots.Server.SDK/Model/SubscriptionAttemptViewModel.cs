/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Server.SDK.Client.SwaggerDateConverter;

namespace OpenBots.Server.SDK.Model
{
    /// <summary>
    /// SubscriptionAttemptViewModel
    /// </summary>
    [DataContract]
        public partial class SubscriptionAttemptViewModel :  IEquatable<SubscriptionAttemptViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionAttemptViewModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="transportType">transportType.</param>
        /// <param name="eventLogID">eventLogID.</param>
        /// <param name="integrationEventSubscriptionID">integrationEventSubscriptionID.</param>
        /// <param name="integrationEventName">integrationEventName.</param>
        /// <param name="status">status.</param>
        /// <param name="attemptCounter">attemptCounter.</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="createdBy">createdBy.</param>
        public SubscriptionAttemptViewModel(Guid? id = default(Guid?), string transportType = default(string), Guid? eventLogID = default(Guid?), Guid? integrationEventSubscriptionID = default(Guid?), string integrationEventName = default(string), string status = default(string), int? attemptCounter = default(int?), DateTime? createdOn = default(DateTime?), string createdBy = default(string))
        {
            this.Id = id;
            this.TransportType = transportType;
            this.EventLogID = eventLogID;
            this.IntegrationEventSubscriptionID = integrationEventSubscriptionID;
            this.IntegrationEventName = integrationEventName;
            this.Status = status;
            this.AttemptCounter = attemptCounter;
            this.CreatedOn = createdOn;
            this.CreatedBy = createdBy;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets TransportType
        /// </summary>
        [DataMember(Name="transportType", EmitDefaultValue=false)]
        public string TransportType { get; set; }

        /// <summary>
        /// Gets or Sets EventLogID
        /// </summary>
        [DataMember(Name="eventLogID", EmitDefaultValue=false)]
        public Guid? EventLogID { get; set; }

        /// <summary>
        /// Gets or Sets IntegrationEventSubscriptionID
        /// </summary>
        [DataMember(Name="integrationEventSubscriptionID", EmitDefaultValue=false)]
        public Guid? IntegrationEventSubscriptionID { get; set; }

        /// <summary>
        /// Gets or Sets IntegrationEventName
        /// </summary>
        [DataMember(Name="integrationEventName", EmitDefaultValue=false)]
        public string IntegrationEventName { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets AttemptCounter
        /// </summary>
        [DataMember(Name="attemptCounter", EmitDefaultValue=false)]
        public int? AttemptCounter { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name="createdOn", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionAttemptViewModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TransportType: ").Append(TransportType).Append("\n");
            sb.Append("  EventLogID: ").Append(EventLogID).Append("\n");
            sb.Append("  IntegrationEventSubscriptionID: ").Append(IntegrationEventSubscriptionID).Append("\n");
            sb.Append("  IntegrationEventName: ").Append(IntegrationEventName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AttemptCounter: ").Append(AttemptCounter).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionAttemptViewModel);
        }

        /// <summary>
        /// Returns true if SubscriptionAttemptViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionAttemptViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionAttemptViewModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TransportType == input.TransportType ||
                    (this.TransportType != null &&
                    this.TransportType.Equals(input.TransportType))
                ) && 
                (
                    this.EventLogID == input.EventLogID ||
                    (this.EventLogID != null &&
                    this.EventLogID.Equals(input.EventLogID))
                ) && 
                (
                    this.IntegrationEventSubscriptionID == input.IntegrationEventSubscriptionID ||
                    (this.IntegrationEventSubscriptionID != null &&
                    this.IntegrationEventSubscriptionID.Equals(input.IntegrationEventSubscriptionID))
                ) && 
                (
                    this.IntegrationEventName == input.IntegrationEventName ||
                    (this.IntegrationEventName != null &&
                    this.IntegrationEventName.Equals(input.IntegrationEventName))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.AttemptCounter == input.AttemptCounter ||
                    (this.AttemptCounter != null &&
                    this.AttemptCounter.Equals(input.AttemptCounter))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TransportType != null)
                    hashCode = hashCode * 59 + this.TransportType.GetHashCode();
                if (this.EventLogID != null)
                    hashCode = hashCode * 59 + this.EventLogID.GetHashCode();
                if (this.IntegrationEventSubscriptionID != null)
                    hashCode = hashCode * 59 + this.IntegrationEventSubscriptionID.GetHashCode();
                if (this.IntegrationEventName != null)
                    hashCode = hashCode * 59 + this.IntegrationEventName.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.AttemptCounter != null)
                    hashCode = hashCode * 59 + this.AttemptCounter.GetHashCode();
                if (this.CreatedOn != null)
                    hashCode = hashCode * 59 + this.CreatedOn.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
