/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Server.SDK.Client.SwaggerDateConverter;

namespace OpenBots.Server.SDK.Model
{
    /// <summary>
    /// Body14
    /// </summary>
    [DataContract]
        public partial class Body14 :  IEquatable<Body14>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Body14" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="queueId">queueId.</param>
        /// <param name="source">source.</param>
        /// <param name="_event">_event.</param>
        /// <param name="expireOnUTC">expireOnUTC.</param>
        /// <param name="postponeUntilUTC">postponeUntilUTC.</param>
        /// <param name="type">type.</param>
        /// <param name="dataJson">dataJson.</param>
        /// <param name="state">state.</param>
        /// <param name="fileIds">fileIds.</param>
        /// <param name="files">files.</param>
        /// <param name="driveName">driveName.</param>
        public Body14(Guid? id = default(Guid?), string name = default(string), Guid? queueId = default(Guid?), string source = default(string), string _event = default(string), DateTime? expireOnUTC = default(DateTime?), DateTime? postponeUntilUTC = default(DateTime?), string type = default(string), string dataJson = default(string), string state = default(string), List<Guid?> fileIds = default(List<Guid?>), List<byte[]> files = default(List<byte[]>), string driveName = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.QueueId = queueId;
            this.Source = source;
            this.Event = _event;
            this.ExpireOnUTC = expireOnUTC;
            this.PostponeUntilUTC = postponeUntilUTC;
            this.Type = type;
            this.DataJson = dataJson;
            this.State = state;
            this.FileIds = fileIds;
            this.Files = files;
            this.DriveName = driveName;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets QueueId
        /// </summary>
        [DataMember(Name="QueueId", EmitDefaultValue=false)]
        public Guid? QueueId { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="Source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        [DataMember(Name="Event", EmitDefaultValue=false)]
        public string Event { get; set; }

        /// <summary>
        /// Gets or Sets ExpireOnUTC
        /// </summary>
        [DataMember(Name="ExpireOnUTC", EmitDefaultValue=false)]
        public DateTime? ExpireOnUTC { get; set; }

        /// <summary>
        /// Gets or Sets PostponeUntilUTC
        /// </summary>
        [DataMember(Name="PostponeUntilUTC", EmitDefaultValue=false)]
        public DateTime? PostponeUntilUTC { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets DataJson
        /// </summary>
        [DataMember(Name="DataJson", EmitDefaultValue=false)]
        public string DataJson { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets FileIds
        /// </summary>
        [DataMember(Name="FileIds", EmitDefaultValue=false)]
        public List<Guid?> FileIds { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name="Files", EmitDefaultValue=false)]
        public List<byte[]> Files { get; set; }

        /// <summary>
        /// Gets or Sets DriveName
        /// </summary>
        [DataMember(Name="DriveName", EmitDefaultValue=false)]
        public string DriveName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body14 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  ExpireOnUTC: ").Append(ExpireOnUTC).Append("\n");
            sb.Append("  PostponeUntilUTC: ").Append(PostponeUntilUTC).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DataJson: ").Append(DataJson).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  FileIds: ").Append(FileIds).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  DriveName: ").Append(DriveName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body14);
        }

        /// <summary>
        /// Returns true if Body14 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body14 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body14 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.QueueId == input.QueueId ||
                    (this.QueueId != null &&
                    this.QueueId.Equals(input.QueueId))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                ) && 
                (
                    this.ExpireOnUTC == input.ExpireOnUTC ||
                    (this.ExpireOnUTC != null &&
                    this.ExpireOnUTC.Equals(input.ExpireOnUTC))
                ) && 
                (
                    this.PostponeUntilUTC == input.PostponeUntilUTC ||
                    (this.PostponeUntilUTC != null &&
                    this.PostponeUntilUTC.Equals(input.PostponeUntilUTC))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.DataJson == input.DataJson ||
                    (this.DataJson != null &&
                    this.DataJson.Equals(input.DataJson))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.FileIds == input.FileIds ||
                    this.FileIds != null &&
                    input.FileIds != null &&
                    this.FileIds.SequenceEqual(input.FileIds)
                ) && 
                (
                    this.Files == input.Files ||
                    this.Files != null &&
                    input.Files != null &&
                    this.Files.SequenceEqual(input.Files)
                ) && 
                (
                    this.DriveName == input.DriveName ||
                    (this.DriveName != null &&
                    this.DriveName.Equals(input.DriveName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.QueueId != null)
                    hashCode = hashCode * 59 + this.QueueId.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Event != null)
                    hashCode = hashCode * 59 + this.Event.GetHashCode();
                if (this.ExpireOnUTC != null)
                    hashCode = hashCode * 59 + this.ExpireOnUTC.GetHashCode();
                if (this.PostponeUntilUTC != null)
                    hashCode = hashCode * 59 + this.PostponeUntilUTC.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.DataJson != null)
                    hashCode = hashCode * 59 + this.DataJson.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.FileIds != null)
                    hashCode = hashCode * 59 + this.FileIds.GetHashCode();
                if (this.Files != null)
                    hashCode = hashCode * 59 + this.Files.GetHashCode();
                if (this.DriveName != null)
                    hashCode = hashCode * 59 + this.DriveName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
