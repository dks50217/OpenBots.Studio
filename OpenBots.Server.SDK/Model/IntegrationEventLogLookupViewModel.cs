/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Server.SDK.Client.SwaggerDateConverter;

namespace OpenBots.Server.SDK.Model
{
    /// <summary>
    /// IntegrationEventLogLookupViewModel
    /// </summary>
    [DataContract]
        public partial class IntegrationEventLogLookupViewModel :  IEquatable<IntegrationEventLogLookupViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationEventLogLookupViewModel" /> class.
        /// </summary>
        /// <param name="integrationEventNameList">integrationEventNameList.</param>
        /// <param name="integrationEntityTypeList">integrationEntityTypeList.</param>
        public IntegrationEventLogLookupViewModel(List<string> integrationEventNameList = default(List<string>), List<string> integrationEntityTypeList = default(List<string>))
        {
            this.IntegrationEventNameList = integrationEventNameList;
            this.IntegrationEntityTypeList = integrationEntityTypeList;
        }
        
        /// <summary>
        /// Gets or Sets IntegrationEventNameList
        /// </summary>
        [DataMember(Name="integrationEventNameList", EmitDefaultValue=false)]
        public List<string> IntegrationEventNameList { get; set; }

        /// <summary>
        /// Gets or Sets IntegrationEntityTypeList
        /// </summary>
        [DataMember(Name="integrationEntityTypeList", EmitDefaultValue=false)]
        public List<string> IntegrationEntityTypeList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IntegrationEventLogLookupViewModel {\n");
            sb.Append("  IntegrationEventNameList: ").Append(IntegrationEventNameList).Append("\n");
            sb.Append("  IntegrationEntityTypeList: ").Append(IntegrationEntityTypeList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IntegrationEventLogLookupViewModel);
        }

        /// <summary>
        /// Returns true if IntegrationEventLogLookupViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of IntegrationEventLogLookupViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntegrationEventLogLookupViewModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IntegrationEventNameList == input.IntegrationEventNameList ||
                    this.IntegrationEventNameList != null &&
                    input.IntegrationEventNameList != null &&
                    this.IntegrationEventNameList.SequenceEqual(input.IntegrationEventNameList)
                ) && 
                (
                    this.IntegrationEntityTypeList == input.IntegrationEntityTypeList ||
                    this.IntegrationEntityTypeList != null &&
                    input.IntegrationEntityTypeList != null &&
                    this.IntegrationEntityTypeList.SequenceEqual(input.IntegrationEntityTypeList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IntegrationEventNameList != null)
                    hashCode = hashCode * 59 + this.IntegrationEventNameList.GetHashCode();
                if (this.IntegrationEntityTypeList != null)
                    hashCode = hashCode * 59 + this.IntegrationEntityTypeList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
