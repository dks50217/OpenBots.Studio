/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Server.SDK.Client.SwaggerDateConverter;

namespace OpenBots.Server.SDK.Model
{
    /// <summary>
    /// IntegrationEventSubscription
    /// </summary>
    [DataContract]
        public partial class IntegrationEventSubscription :  IEquatable<IntegrationEventSubscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationEventSubscription" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="isDeleted">isDeleted (default to false).</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdOn">createdOn.</param>
        /// <param name="deletedBy">deletedBy.</param>
        /// <param name="deleteOn">deleteOn.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="updatedOn">updatedOn.</param>
        /// <param name="updatedBy">updatedBy.</param>
        /// <param name="name">name (required).</param>
        /// <param name="entityType">entityType.</param>
        /// <param name="integrationEventName">integrationEventName.</param>
        /// <param name="entityID">entityID.</param>
        /// <param name="entityName">entityName.</param>
        /// <param name="transportType">transportType (required).</param>
        /// <param name="httPURL">httPURL.</param>
        /// <param name="httPAddHeaderKey">httPAddHeaderKey.</param>
        /// <param name="httPAddHeaderValue">httPAddHeaderValue.</param>
        /// <param name="maxRetryCount">maxRetryCount.</param>
        /// <param name="queuEQueueID">queuEQueueID.</param>
        public IntegrationEventSubscription(Guid? id = default(Guid?), bool? isDeleted = false, string createdBy = default(string), DateTime? createdOn = default(DateTime?), string deletedBy = default(string), DateTime? deleteOn = default(DateTime?), byte[] timestamp = default(byte[]), DateTime? updatedOn = default(DateTime?), string updatedBy = default(string), string name = default(string), string entityType = default(string), string integrationEventName = default(string), Guid? entityID = default(Guid?), string entityName = default(string), TransportType transportType = default(TransportType), string httPURL = default(string), string httPAddHeaderKey = default(string), string httPAddHeaderValue = default(string), int? maxRetryCount = default(int?), Guid? queuEQueueID = default(Guid?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for IntegrationEventSubscription and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "transportType" is required (not null)
            if (transportType == null)
            {
                throw new InvalidDataException("transportType is a required property for IntegrationEventSubscription and cannot be null");
            }
            else
            {
                this.TransportType = transportType;
            }
            this.Id = id;
            // use default value if no "isDeleted" provided
            if (isDeleted == null)
            {
                this.IsDeleted = false;
            }
            else
            {
                this.IsDeleted = isDeleted;
            }
            this.CreatedBy = createdBy;
            this.CreatedOn = createdOn;
            this.DeletedBy = deletedBy;
            this.DeleteOn = deleteOn;
            this.Timestamp = timestamp;
            this.UpdatedOn = updatedOn;
            this.UpdatedBy = updatedBy;
            this.EntityType = entityType;
            this.IntegrationEventName = integrationEventName;
            this.EntityID = entityID;
            this.EntityName = entityName;
            this.HttPURL = httPURL;
            this.HttPAddHeaderKey = httPAddHeaderKey;
            this.HttPAddHeaderValue = httPAddHeaderValue;
            this.MaxRetryCount = maxRetryCount;
            this.QueuEQueueID = queuEQueueID;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name="createdOn", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets DeletedBy
        /// </summary>
        [DataMember(Name="deletedBy", EmitDefaultValue=false)]
        public string DeletedBy { get; set; }

        /// <summary>
        /// Gets or Sets DeleteOn
        /// </summary>
        [DataMember(Name="deleteOn", EmitDefaultValue=false)]
        public DateTime? DeleteOn { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public byte[] Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedOn
        /// </summary>
        [DataMember(Name="updatedOn", EmitDefaultValue=false)]
        public DateTime? UpdatedOn { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name="updatedBy", EmitDefaultValue=false)]
        public string UpdatedBy { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name="entityType", EmitDefaultValue=false)]
        public string EntityType { get; set; }

        /// <summary>
        /// Gets or Sets IntegrationEventName
        /// </summary>
        [DataMember(Name="integrationEventName", EmitDefaultValue=false)]
        public string IntegrationEventName { get; set; }

        /// <summary>
        /// Gets or Sets EntityID
        /// </summary>
        [DataMember(Name="entityID", EmitDefaultValue=false)]
        public Guid? EntityID { get; set; }

        /// <summary>
        /// Gets or Sets EntityName
        /// </summary>
        [DataMember(Name="entityName", EmitDefaultValue=false)]
        public string EntityName { get; set; }

        /// <summary>
        /// Gets or Sets TransportType
        /// </summary>
        [DataMember(Name="transportType", EmitDefaultValue=false)]
        public TransportType TransportType { get; set; }

        /// <summary>
        /// Gets or Sets HttPURL
        /// </summary>
        [DataMember(Name="httP_URL", EmitDefaultValue=false)]
        public string HttPURL { get; set; }

        /// <summary>
        /// Gets or Sets HttPAddHeaderKey
        /// </summary>
        [DataMember(Name="httP_AddHeader_Key", EmitDefaultValue=false)]
        public string HttPAddHeaderKey { get; set; }

        /// <summary>
        /// Gets or Sets HttPAddHeaderValue
        /// </summary>
        [DataMember(Name="httP_AddHeader_Value", EmitDefaultValue=false)]
        public string HttPAddHeaderValue { get; set; }

        /// <summary>
        /// Gets or Sets MaxRetryCount
        /// </summary>
        [DataMember(Name="max_RetryCount", EmitDefaultValue=false)]
        public int? MaxRetryCount { get; set; }

        /// <summary>
        /// Gets or Sets QueuEQueueID
        /// </summary>
        [DataMember(Name="queuE_QueueID", EmitDefaultValue=false)]
        public Guid? QueuEQueueID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IntegrationEventSubscription {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  DeletedBy: ").Append(DeletedBy).Append("\n");
            sb.Append("  DeleteOn: ").Append(DeleteOn).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  UpdatedOn: ").Append(UpdatedOn).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  IntegrationEventName: ").Append(IntegrationEventName).Append("\n");
            sb.Append("  EntityID: ").Append(EntityID).Append("\n");
            sb.Append("  EntityName: ").Append(EntityName).Append("\n");
            sb.Append("  TransportType: ").Append(TransportType).Append("\n");
            sb.Append("  HttPURL: ").Append(HttPURL).Append("\n");
            sb.Append("  HttPAddHeaderKey: ").Append(HttPAddHeaderKey).Append("\n");
            sb.Append("  HttPAddHeaderValue: ").Append(HttPAddHeaderValue).Append("\n");
            sb.Append("  MaxRetryCount: ").Append(MaxRetryCount).Append("\n");
            sb.Append("  QueuEQueueID: ").Append(QueuEQueueID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IntegrationEventSubscription);
        }

        /// <summary>
        /// Returns true if IntegrationEventSubscription instances are equal
        /// </summary>
        /// <param name="input">Instance of IntegrationEventSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntegrationEventSubscription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.DeletedBy == input.DeletedBy ||
                    (this.DeletedBy != null &&
                    this.DeletedBy.Equals(input.DeletedBy))
                ) && 
                (
                    this.DeleteOn == input.DeleteOn ||
                    (this.DeleteOn != null &&
                    this.DeleteOn.Equals(input.DeleteOn))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.UpdatedOn == input.UpdatedOn ||
                    (this.UpdatedOn != null &&
                    this.UpdatedOn.Equals(input.UpdatedOn))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.IntegrationEventName == input.IntegrationEventName ||
                    (this.IntegrationEventName != null &&
                    this.IntegrationEventName.Equals(input.IntegrationEventName))
                ) && 
                (
                    this.EntityID == input.EntityID ||
                    (this.EntityID != null &&
                    this.EntityID.Equals(input.EntityID))
                ) && 
                (
                    this.EntityName == input.EntityName ||
                    (this.EntityName != null &&
                    this.EntityName.Equals(input.EntityName))
                ) && 
                (
                    this.TransportType == input.TransportType ||
                    (this.TransportType != null &&
                    this.TransportType.Equals(input.TransportType))
                ) && 
                (
                    this.HttPURL == input.HttPURL ||
                    (this.HttPURL != null &&
                    this.HttPURL.Equals(input.HttPURL))
                ) && 
                (
                    this.HttPAddHeaderKey == input.HttPAddHeaderKey ||
                    (this.HttPAddHeaderKey != null &&
                    this.HttPAddHeaderKey.Equals(input.HttPAddHeaderKey))
                ) && 
                (
                    this.HttPAddHeaderValue == input.HttPAddHeaderValue ||
                    (this.HttPAddHeaderValue != null &&
                    this.HttPAddHeaderValue.Equals(input.HttPAddHeaderValue))
                ) && 
                (
                    this.MaxRetryCount == input.MaxRetryCount ||
                    (this.MaxRetryCount != null &&
                    this.MaxRetryCount.Equals(input.MaxRetryCount))
                ) && 
                (
                    this.QueuEQueueID == input.QueuEQueueID ||
                    (this.QueuEQueueID != null &&
                    this.QueuEQueueID.Equals(input.QueuEQueueID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedOn != null)
                    hashCode = hashCode * 59 + this.CreatedOn.GetHashCode();
                if (this.DeletedBy != null)
                    hashCode = hashCode * 59 + this.DeletedBy.GetHashCode();
                if (this.DeleteOn != null)
                    hashCode = hashCode * 59 + this.DeleteOn.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.UpdatedOn != null)
                    hashCode = hashCode * 59 + this.UpdatedOn.GetHashCode();
                if (this.UpdatedBy != null)
                    hashCode = hashCode * 59 + this.UpdatedBy.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.IntegrationEventName != null)
                    hashCode = hashCode * 59 + this.IntegrationEventName.GetHashCode();
                if (this.EntityID != null)
                    hashCode = hashCode * 59 + this.EntityID.GetHashCode();
                if (this.EntityName != null)
                    hashCode = hashCode * 59 + this.EntityName.GetHashCode();
                if (this.TransportType != null)
                    hashCode = hashCode * 59 + this.TransportType.GetHashCode();
                if (this.HttPURL != null)
                    hashCode = hashCode * 59 + this.HttPURL.GetHashCode();
                if (this.HttPAddHeaderKey != null)
                    hashCode = hashCode * 59 + this.HttPAddHeaderKey.GetHashCode();
                if (this.HttPAddHeaderValue != null)
                    hashCode = hashCode * 59 + this.HttPAddHeaderValue.GetHashCode();
                if (this.MaxRetryCount != null)
                    hashCode = hashCode * 59 + this.MaxRetryCount.GetHashCode();
                if (this.QueuEQueueID != null)
                    hashCode = hashCode * 59 + this.QueuEQueueID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
